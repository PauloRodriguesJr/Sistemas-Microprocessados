
prat_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080017c4  080017c4  000117c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017e4  080017e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080017e4  080017e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017e4  080017e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017e4  080017e4  000117e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000000c  080017f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  080017f8  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b50  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000114b  00000000  00000000  00023b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  00024cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c0  00000000  00000000  00025128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a85  00000000  00000000  000254e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000050be  00000000  00000000  0003af6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bd93  00000000  00000000  0004002b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bbdbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f38  00000000  00000000  000bbe14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080017ac 	.word	0x080017ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080017ac 	.word	0x080017ac

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08e      	sub	sp, #56	; 0x38
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbbb 	bl	80008cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f9fb 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa5b 	bl	8000614 <MX_GPIO_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800015e:	f000 fa3c 	bl	80005da <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // garantir que PC13 começa desligado
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000162:	2201      	movs	r2, #1
 8000164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000168:	48ab      	ldr	r0, [pc, #684]	; (8000418 <main+0x2cc>)
 800016a:	f000 fed0 	bl	8000f0e <HAL_GPIO_WritePin>
    static enum {INI_D3, LIG_D3, DSLG_D3} sttD3=INI_D3; // var estados de D3
    static enum {INI_D4, LIG_D4, DSLG_D4} sttD4=INI_D4; // var estados de D4
    static enum {INI_PA1, LIG_PA1, DSLG_PA1} sttPA1=INI_PA1; // var estados de PA1

  // para controlar vars tempos de entrada na rotina ON/OFF de cada LED
    uint32_t tin_D1=0, tin_D2=0, tin_D3=0, tin_D4=0, tin_PA1=0;
 800016e:	2300      	movs	r3, #0
 8000170:	637b      	str	r3, [r7, #52]	; 0x34
 8000172:	2300      	movs	r3, #0
 8000174:	633b      	str	r3, [r7, #48]	; 0x30
 8000176:	2300      	movs	r3, #0
 8000178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800017a:	2300      	movs	r3, #0
 800017c:	62bb      	str	r3, [r7, #40]	; 0x28
 800017e:	2300      	movs	r3, #0
 8000180:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dt_D1=0, dt_D2=0, dt_D3=0, dt_D4=0, dt_PA1=PR; // proximos dt p/ cada LED
 8000182:	2300      	movs	r3, #0
 8000184:	623b      	str	r3, [r7, #32]
 8000186:	2300      	movs	r3, #0
 8000188:	61fb      	str	r3, [r7, #28]
 800018a:	2300      	movs	r3, #0
 800018c:	61bb      	str	r3, [r7, #24]
 800018e:	2300      	movs	r3, #0
 8000190:	617b      	str	r3, [r7, #20]
 8000192:	2350      	movs	r3, #80	; 0x50
 8000194:	613b      	str	r3, [r7, #16]
    int modo = get_modo_oper();          // inicia modo como 0
 8000196:	f000 fb57 	bl	8000848 <get_modo_oper>
 800019a:	60f8      	str	r0, [r7, #12]

	// estrutura de dados para programar pedido de interrupção por software
  EXTI_HandleTypeDef hexti_1 = {};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
  hexti_1.Line = EXTI_LINE_1;
 80001a4:	4b9d      	ldr	r3, [pc, #628]	; (800041c <main+0x2d0>)
 80001a6:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

// tarefa #0 (executa sempre): ajustar tempos de piscar dos LEDs
	modo = get_modo_oper();
 80001a8:	f000 fb4e 	bl	8000848 <get_modo_oper>
 80001ac:	60f8      	str	r0, [r7, #12]
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2b03      	cmp	r3, #3
 80001b2:	d837      	bhi.n	8000224 <main+0xd8>
 80001b4:	a201      	add	r2, pc, #4	; (adr r2, 80001bc <main+0x70>)
 80001b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ba:	bf00      	nop
 80001bc:	080001cd 	.word	0x080001cd
 80001c0:	080001e3 	.word	0x080001e3
 80001c4:	080001f9 	.word	0x080001f9
 80001c8:	0800020f 	.word	0x0800020f
	switch(modo)
	{
	  case 0:   // mo modo '0' ajusta dt_xx dos LEDs
		dt_D1 = PS;                   // modo 0 - dt_D1
 80001cc:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 80001d0:	623b      	str	r3, [r7, #32]
		dt_D2 = PL;                   // modo 0 - dt_D2
 80001d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80001d6:	61fb      	str	r3, [r7, #28]
		dt_D3 = PM;                   // modo 0 - dt_D3
 80001d8:	23f0      	movs	r3, #240	; 0xf0
 80001da:	61bb      	str	r3, [r7, #24]
		dt_D4 = PR;                   // modo 0 - dt_D4
 80001dc:	2350      	movs	r3, #80	; 0x50
 80001de:	617b      	str	r3, [r7, #20]
		break;
 80001e0:	e020      	b.n	8000224 <main+0xd8>
	  case 1:   // mo modo '1' reajusta dt_xx dos LEDs
		dt_D1 = PL;                   // modo 1 - dt_D1
 80001e2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80001e6:	623b      	str	r3, [r7, #32]
		dt_D2 = PM;                   // modo 1 - dt_D2
 80001e8:	23f0      	movs	r3, #240	; 0xf0
 80001ea:	61fb      	str	r3, [r7, #28]
		dt_D3 = PR;                   // modo 1 - dt_D3
 80001ec:	2350      	movs	r3, #80	; 0x50
 80001ee:	61bb      	str	r3, [r7, #24]
		dt_D4 = PS;                   // modo 1 - dt_D4
 80001f0:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 80001f4:	617b      	str	r3, [r7, #20]
		break;
 80001f6:	e015      	b.n	8000224 <main+0xd8>
	  case 2:   // mo modo '2' reajusta dt_xx dos LEDs
		dt_D1 = PM;                   // modo 2 - dt_D1
 80001f8:	23f0      	movs	r3, #240	; 0xf0
 80001fa:	623b      	str	r3, [r7, #32]
		dt_D2 = PR;                   // modo 2 - dt_D2
 80001fc:	2350      	movs	r3, #80	; 0x50
 80001fe:	61fb      	str	r3, [r7, #28]
		dt_D3 = PS;                   // modo 2 - dt_D3
 8000200:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8000204:	61bb      	str	r3, [r7, #24]
		dt_D4 = PL;                   // modo 2 - dt_D4
 8000206:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800020a:	617b      	str	r3, [r7, #20]
		break;
 800020c:	e00a      	b.n	8000224 <main+0xd8>
	  case 3:   // mo modo '3' reajusta dt_xx dos LEDs
		dt_D1 = PR;                   // modo 3 - dt_D1
 800020e:	2350      	movs	r3, #80	; 0x50
 8000210:	623b      	str	r3, [r7, #32]
		dt_D2 = PS;                   // modo 3 - dt_D2
 8000212:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8000216:	61fb      	str	r3, [r7, #28]
		dt_D3 = PL;                   // modo 3 - dt_D3
 8000218:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800021c:	61bb      	str	r3, [r7, #24]
		dt_D4 = PM;                   // modo 3 - dt_D4
 800021e:	23f0      	movs	r3, #240	; 0xf0
 8000220:	617b      	str	r3, [r7, #20]
		break;
 8000222:	bf00      	nop
	}

// tarefa #1 : controlar o estado do LED D1
	switch (sttD1)
 8000224:	4b7e      	ldr	r3, [pc, #504]	; (8000420 <main+0x2d4>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b02      	cmp	r3, #2
 800022a:	d02b      	beq.n	8000284 <main+0x138>
 800022c:	2b02      	cmp	r3, #2
 800022e:	dc44      	bgt.n	80002ba <main+0x16e>
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <main+0xee>
 8000234:	2b01      	cmp	r3, #1
 8000236:	d00d      	beq.n	8000254 <main+0x108>
 8000238:	e03f      	b.n	80002ba <main+0x16e>
	{
	  case INI_D1:                     // vai iniciar a máquina de estado
		tin_D1 = HAL_GetTick();        // tempo inicial que iniciou a tarefa
 800023a:	f000 fb9f 	bl	800097c <HAL_GetTick>
 800023e:	6378      	str	r0, [r7, #52]	; 0x34
		sttD1 = LIG_D1;                // prox estado da máquina
 8000240:	4b77      	ldr	r3, [pc, #476]	; (8000420 <main+0x2d4>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // desliga o LED
 8000246:	2201      	movs	r2, #1
 8000248:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800024c:	4875      	ldr	r0, [pc, #468]	; (8000424 <main+0x2d8>)
 800024e:	f000 fe5e 	bl	8000f0e <HAL_GPIO_WritePin>
		break;
 8000252:	e032      	b.n	80002ba <main+0x16e>
	  case LIG_D1:          // estado para ligar o LED
		if((HAL_GetTick()-tin_D1)>dt_D1) // se HAL_GetTick()-tin_D1 > dt_D1
 8000254:	f000 fb92 	bl	800097c <HAL_GetTick>
 8000258:	4602      	mov	r2, r0
 800025a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800025c:	1ad3      	subs	r3, r2, r3
 800025e:	6a3a      	ldr	r2, [r7, #32]
 8000260:	429a      	cmp	r2, r3
 8000262:	d227      	bcs.n	80002b4 <main+0x168>
		{
		  tin_D1 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 8000264:	f000 fb8a 	bl	800097c <HAL_GetTick>
 8000268:	6378      	str	r0, [r7, #52]	; 0x34
		  sttD1 = DSLG_D1;             // muda o prox estado da máquina
 800026a:	4b6d      	ldr	r3, [pc, #436]	; (8000420 <main+0x2d4>)
 800026c:	2202      	movs	r2, #2
 800026e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // liga o LED
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000276:	486b      	ldr	r0, [pc, #428]	; (8000424 <main+0x2d8>)
 8000278:	f000 fe49 	bl	8000f0e <HAL_GPIO_WritePin>
		  lb15 = 0;
 800027c:	4b6a      	ldr	r3, [pc, #424]	; (8000428 <main+0x2dc>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
		}
		break;
 8000282:	e017      	b.n	80002b4 <main+0x168>
	  case DSLG_D1:                    // estado para desligar o LED
		if((HAL_GetTick()-tin_D1)>dt_D1) // se HAL_GetTick()-tin_D1 > dt_D1
 8000284:	f000 fb7a 	bl	800097c <HAL_GetTick>
 8000288:	4602      	mov	r2, r0
 800028a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	6a3a      	ldr	r2, [r7, #32]
 8000290:	429a      	cmp	r2, r3
 8000292:	d211      	bcs.n	80002b8 <main+0x16c>
		{
		  tin_D1 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 8000294:	f000 fb72 	bl	800097c <HAL_GetTick>
 8000298:	6378      	str	r0, [r7, #52]	; 0x34
		  sttD1 = LIG_D1;              // muda o prox estado da máquina
 800029a:	4b61      	ldr	r3, [pc, #388]	; (8000420 <main+0x2d4>)
 800029c:	2201      	movs	r2, #1
 800029e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // desliga o LED
 80002a0:	2201      	movs	r2, #1
 80002a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002a6:	485f      	ldr	r0, [pc, #380]	; (8000424 <main+0x2d8>)
 80002a8:	f000 fe31 	bl	8000f0e <HAL_GPIO_WritePin>
		  lb15 = 1;
 80002ac:	4b5e      	ldr	r3, [pc, #376]	; (8000428 <main+0x2dc>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	601a      	str	r2, [r3, #0]
		}
		break;
 80002b2:	e001      	b.n	80002b8 <main+0x16c>
		break;
 80002b4:	bf00      	nop
 80002b6:	e000      	b.n	80002ba <main+0x16e>
		break;
 80002b8:	bf00      	nop
	};

// tarefa #2 : controlar o estado do LED D2
	switch (sttD2)
 80002ba:	4b5c      	ldr	r3, [pc, #368]	; (800042c <main+0x2e0>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d02b      	beq.n	800031a <main+0x1ce>
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	dc44      	bgt.n	8000350 <main+0x204>
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d002      	beq.n	80002d0 <main+0x184>
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d00d      	beq.n	80002ea <main+0x19e>
 80002ce:	e03f      	b.n	8000350 <main+0x204>
	{
	  case INI_D2:                     // vai iniciar a máquina de estado
		tin_D2 = HAL_GetTick();        // tempo inicial que iniciou a tarefa
 80002d0:	f000 fb54 	bl	800097c <HAL_GetTick>
 80002d4:	6338      	str	r0, [r7, #48]	; 0x30
		sttD2 = LIG_D2;                // prox estado da máquina
 80002d6:	4b55      	ldr	r3, [pc, #340]	; (800042c <main+0x2e0>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // desliga o LED
 80002dc:	2201      	movs	r2, #1
 80002de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002e2:	4850      	ldr	r0, [pc, #320]	; (8000424 <main+0x2d8>)
 80002e4:	f000 fe13 	bl	8000f0e <HAL_GPIO_WritePin>
		break;
 80002e8:	e032      	b.n	8000350 <main+0x204>
	  case LIG_D2:          // estado para ligar o LED
		if((HAL_GetTick()-tin_D2)>dt_D2) // se HAL_GetTick()-tin_D2 > dt_D2
 80002ea:	f000 fb47 	bl	800097c <HAL_GetTick>
 80002ee:	4602      	mov	r2, r0
 80002f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002f2:	1ad3      	subs	r3, r2, r3
 80002f4:	69fa      	ldr	r2, [r7, #28]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d227      	bcs.n	800034a <main+0x1fe>
		{
		  tin_D2 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 80002fa:	f000 fb3f 	bl	800097c <HAL_GetTick>
 80002fe:	6338      	str	r0, [r7, #48]	; 0x30
		  sttD2 = DSLG_D2;             // muda o prox estado da máquina
 8000300:	4b4a      	ldr	r3, [pc, #296]	; (800042c <main+0x2e0>)
 8000302:	2202      	movs	r2, #2
 8000304:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // liga o LED
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800030c:	4845      	ldr	r0, [pc, #276]	; (8000424 <main+0x2d8>)
 800030e:	f000 fdfe 	bl	8000f0e <HAL_GPIO_WritePin>
		  lb14 = 0;
 8000312:	4b47      	ldr	r3, [pc, #284]	; (8000430 <main+0x2e4>)
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
		}
		break;
 8000318:	e017      	b.n	800034a <main+0x1fe>
	  case DSLG_D2:                    // estado para desligar o LED
		if((HAL_GetTick()-tin_D2)>dt_D2) // se HAL_GetTick()-tin_D2 > dt_D2
 800031a:	f000 fb2f 	bl	800097c <HAL_GetTick>
 800031e:	4602      	mov	r2, r0
 8000320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	69fa      	ldr	r2, [r7, #28]
 8000326:	429a      	cmp	r2, r3
 8000328:	d211      	bcs.n	800034e <main+0x202>
		{
		  tin_D2 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 800032a:	f000 fb27 	bl	800097c <HAL_GetTick>
 800032e:	6338      	str	r0, [r7, #48]	; 0x30
		  sttD2 = LIG_D2;              // muda o prox estado da máquina
 8000330:	4b3e      	ldr	r3, [pc, #248]	; (800042c <main+0x2e0>)
 8000332:	2201      	movs	r2, #1
 8000334:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // desliga o LED
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800033c:	4839      	ldr	r0, [pc, #228]	; (8000424 <main+0x2d8>)
 800033e:	f000 fde6 	bl	8000f0e <HAL_GPIO_WritePin>
		  lb14 = 1;
 8000342:	4b3b      	ldr	r3, [pc, #236]	; (8000430 <main+0x2e4>)
 8000344:	2201      	movs	r2, #1
 8000346:	601a      	str	r2, [r3, #0]
		}
		break;
 8000348:	e001      	b.n	800034e <main+0x202>
		break;
 800034a:	bf00      	nop
 800034c:	e000      	b.n	8000350 <main+0x204>
		break;
 800034e:	bf00      	nop
	};

// tarefa #3 : controlar o estado do LED D3
	switch (sttD3)
 8000350:	4b38      	ldr	r3, [pc, #224]	; (8000434 <main+0x2e8>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b02      	cmp	r3, #2
 8000356:	d02b      	beq.n	80003b0 <main+0x264>
 8000358:	2b02      	cmp	r3, #2
 800035a:	dc44      	bgt.n	80003e6 <main+0x29a>
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <main+0x21a>
 8000360:	2b01      	cmp	r3, #1
 8000362:	d00d      	beq.n	8000380 <main+0x234>
 8000364:	e03f      	b.n	80003e6 <main+0x29a>
	{
	  case INI_D3:                     // vai iniciar a máquina de estado
		tin_D3 = HAL_GetTick();        // tempo inicial que iniciou a tarefa
 8000366:	f000 fb09 	bl	800097c <HAL_GetTick>
 800036a:	62f8      	str	r0, [r7, #44]	; 0x2c
		sttD3 = LIG_D3;                // prox estado da máquina
 800036c:	4b31      	ldr	r3, [pc, #196]	; (8000434 <main+0x2e8>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // desliga o LED
 8000372:	2201      	movs	r2, #1
 8000374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000378:	482a      	ldr	r0, [pc, #168]	; (8000424 <main+0x2d8>)
 800037a:	f000 fdc8 	bl	8000f0e <HAL_GPIO_WritePin>
		break;
 800037e:	e032      	b.n	80003e6 <main+0x29a>
	  case LIG_D3:          // estado para ligar o LED
		if((HAL_GetTick()-tin_D3)>dt_D3) // se HAL_GetTick()-tin_D3 > dt_D3
 8000380:	f000 fafc 	bl	800097c <HAL_GetTick>
 8000384:	4602      	mov	r2, r0
 8000386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	69ba      	ldr	r2, [r7, #24]
 800038c:	429a      	cmp	r2, r3
 800038e:	d227      	bcs.n	80003e0 <main+0x294>
		{
		  tin_D3 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 8000390:	f000 faf4 	bl	800097c <HAL_GetTick>
 8000394:	62f8      	str	r0, [r7, #44]	; 0x2c
		  sttD3 = DSLG_D3;             // muda o prox estado da máquina
 8000396:	4b27      	ldr	r3, [pc, #156]	; (8000434 <main+0x2e8>)
 8000398:	2202      	movs	r2, #2
 800039a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // liga o LED
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a2:	4820      	ldr	r0, [pc, #128]	; (8000424 <main+0x2d8>)
 80003a4:	f000 fdb3 	bl	8000f0e <HAL_GPIO_WritePin>
		  lb13 = 0;
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <main+0x2ec>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
		}
		break;
 80003ae:	e017      	b.n	80003e0 <main+0x294>
	  case DSLG_D3:                    // estado para desligar o LED
		if((HAL_GetTick()-tin_D3)>dt_D3) // se HAL_GetTick()-tin_D3 > dt_D3
 80003b0:	f000 fae4 	bl	800097c <HAL_GetTick>
 80003b4:	4602      	mov	r2, r0
 80003b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	69ba      	ldr	r2, [r7, #24]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d211      	bcs.n	80003e4 <main+0x298>
		{
		  tin_D3 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 80003c0:	f000 fadc 	bl	800097c <HAL_GetTick>
 80003c4:	62f8      	str	r0, [r7, #44]	; 0x2c
		  sttD3 = LIG_D3;              // muda o prox estado da máquina
 80003c6:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <main+0x2e8>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // desliga o LED
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4814      	ldr	r0, [pc, #80]	; (8000424 <main+0x2d8>)
 80003d4:	f000 fd9b 	bl	8000f0e <HAL_GPIO_WritePin>
		  lb13 = 1;
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <main+0x2ec>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
		}
		break;
 80003de:	e001      	b.n	80003e4 <main+0x298>
		break;
 80003e0:	bf00      	nop
 80003e2:	e000      	b.n	80003e6 <main+0x29a>
		break;
 80003e4:	bf00      	nop
	};

// tarefa #4 : controlar o estado do LED D4
	switch (sttD4)
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <main+0x2f0>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	d040      	beq.n	8000470 <main+0x324>
 80003ee:	2b02      	cmp	r3, #2
 80003f0:	dc59      	bgt.n	80004a6 <main+0x35a>
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d002      	beq.n	80003fc <main+0x2b0>
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d022      	beq.n	8000440 <main+0x2f4>
 80003fa:	e054      	b.n	80004a6 <main+0x35a>
	{
	  case INI_D4:                     // vai iniciar a máquina de estado
		tin_D4 = HAL_GetTick();        // tempo inicial que iniciou a tarefa
 80003fc:	f000 fabe 	bl	800097c <HAL_GetTick>
 8000400:	62b8      	str	r0, [r7, #40]	; 0x28
		sttD4 = LIG_D4;                // prox estado da máquina
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <main+0x2f0>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // desliga o LED
 8000408:	2201      	movs	r2, #1
 800040a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <main+0x2d8>)
 8000410:	f000 fd7d 	bl	8000f0e <HAL_GPIO_WritePin>
		break;
 8000414:	e047      	b.n	80004a6 <main+0x35a>
 8000416:	bf00      	nop
 8000418:	40011000 	.word	0x40011000
 800041c:	06000001 	.word	0x06000001
 8000420:	2000002c 	.word	0x2000002c
 8000424:	40010c00 	.word	0x40010c00
 8000428:	20000044 	.word	0x20000044
 800042c:	2000002d 	.word	0x2000002d
 8000430:	2000003c 	.word	0x2000003c
 8000434:	2000002e 	.word	0x2000002e
 8000438:	20000040 	.word	0x20000040
 800043c:	2000002f 	.word	0x2000002f
	  case LIG_D4:          // estado para ligar o LED
		if((HAL_GetTick()-tin_D4)>dt_D4) // se HAL_GetTick()-tin_D4 > dt_D4
 8000440:	f000 fa9c 	bl	800097c <HAL_GetTick>
 8000444:	4602      	mov	r2, r0
 8000446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	697a      	ldr	r2, [r7, #20]
 800044c:	429a      	cmp	r2, r3
 800044e:	d227      	bcs.n	80004a0 <main+0x354>
		{
		  tin_D4 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 8000450:	f000 fa94 	bl	800097c <HAL_GetTick>
 8000454:	62b8      	str	r0, [r7, #40]	; 0x28
		  sttD4 = DSLG_D4;             // muda o prox estado da máquina
 8000456:	4b38      	ldr	r3, [pc, #224]	; (8000538 <main+0x3ec>)
 8000458:	2202      	movs	r2, #2
 800045a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // liga o LED
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000462:	4836      	ldr	r0, [pc, #216]	; (800053c <main+0x3f0>)
 8000464:	f000 fd53 	bl	8000f0e <HAL_GPIO_WritePin>
		  lb12 = 0;
 8000468:	4b35      	ldr	r3, [pc, #212]	; (8000540 <main+0x3f4>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
		}
		break;
 800046e:	e017      	b.n	80004a0 <main+0x354>
	  case DSLG_D4:                    // estado para desligar o LED
		if((HAL_GetTick()-tin_D4)>dt_D4) // se HAL_GetTick()-tin_D4 > dt_D4
 8000470:	f000 fa84 	bl	800097c <HAL_GetTick>
 8000474:	4602      	mov	r2, r0
 8000476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	697a      	ldr	r2, [r7, #20]
 800047c:	429a      	cmp	r2, r3
 800047e:	d211      	bcs.n	80004a4 <main+0x358>
		{
		  tin_D4 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 8000480:	f000 fa7c 	bl	800097c <HAL_GetTick>
 8000484:	62b8      	str	r0, [r7, #40]	; 0x28
		  sttD4 = LIG_D4;              // muda o prox estado da máquina
 8000486:	4b2c      	ldr	r3, [pc, #176]	; (8000538 <main+0x3ec>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // desliga o LED
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000492:	482a      	ldr	r0, [pc, #168]	; (800053c <main+0x3f0>)
 8000494:	f000 fd3b 	bl	8000f0e <HAL_GPIO_WritePin>
		  lb12 = 1;
 8000498:	4b29      	ldr	r3, [pc, #164]	; (8000540 <main+0x3f4>)
 800049a:	2201      	movs	r2, #1
 800049c:	601a      	str	r2, [r3, #0]
		}
		break;
 800049e:	e001      	b.n	80004a4 <main+0x358>
		break;
 80004a0:	bf00      	nop
 80004a2:	e000      	b.n	80004a6 <main+0x35a>
		break;
 80004a4:	bf00      	nop
	};

// tarefa #5 - com interrupção gerada por software
#if CMP_MODO==0                        // DIRETIVA PARA O COMPILADOR !!!
		 // --- tarefa #5A - XMODO = 0   (com interrupção gerada por software)
		  switch (sttPA1)
 80004a6:	4b27      	ldr	r3, [pc, #156]	; (8000544 <main+0x3f8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d02b      	beq.n	8000506 <main+0x3ba>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	f73f ae7a 	bgt.w	80001a8 <main+0x5c>
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d002      	beq.n	80004be <main+0x372>
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d004      	beq.n	80004c6 <main+0x37a>
 80004bc:	e03b      	b.n	8000536 <main+0x3ea>
		  {
		  case INI_PA1:                    // vai iniciar a máquina de estado
		    sttPA1 = LIG_PA1;              // prox estado da máquina
 80004be:	4b21      	ldr	r3, [pc, #132]	; (8000544 <main+0x3f8>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	701a      	strb	r2, [r3, #0]
		    break;
 80004c4:	e037      	b.n	8000536 <main+0x3ea>
		  case LIG_PA1:                    // estado p/ gerar INT_EXT_1
		    if((HAL_GetTick()-tin_PA1)>dt_PA1) // se HAL_GetTick()-tin_PA1 > dt_PA1
 80004c6:	f000 fa59 	bl	800097c <HAL_GetTick>
 80004ca:	4602      	mov	r2, r0
 80004cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	693a      	ldr	r2, [r7, #16]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d22c      	bcs.n	8000530 <main+0x3e4>
		    {
		      tin_PA1 = HAL_GetTick();     // guarda tempo p/ prox mudança estado
 80004d6:	f000 fa51 	bl	800097c <HAL_GetTick>
 80004da:	6278      	str	r0, [r7, #36]	; 0x24
		      if (lpa1 == 1) {
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <main+0x3fc>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d125      	bne.n	8000530 <main+0x3e4>
		        sttPA1 = DSLG_PA1;             // muda o prox estado da máquina
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <main+0x3f8>)
 80004e6:	2202      	movs	r2, #2
 80004e8:	701a      	strb	r2, [r3, #0]
		        //HAL_EXTI_ClearPending(&hexti_1, EXTI_TRIGGER_FALLING);
		        HAL_EXTI_GenerateSWI(&hexti_1);  // pedido de int por software
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fb5d 	bl	8000bac <HAL_EXTI_GenerateSWI>
		        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // ligar led
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f8:	4814      	ldr	r0, [pc, #80]	; (800054c <main+0x400>)
 80004fa:	f000 fd08 	bl	8000f0e <HAL_GPIO_WritePin>
				lpa1=0;                    // volta lpa1 para desativada
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <main+0x3fc>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
		      }
		    }
		    break;
 8000504:	e014      	b.n	8000530 <main+0x3e4>
		  case DSLG_PA1:                   // estado para desligar o LED
		    if((HAL_GetTick()-tin_PA1)>dt_PA1) // se HAL_GetTick()-tin_PA1 > dt_PA1
 8000506:	f000 fa39 	bl	800097c <HAL_GetTick>
 800050a:	4602      	mov	r2, r0
 800050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	429a      	cmp	r2, r3
 8000514:	d20e      	bcs.n	8000534 <main+0x3e8>
		    {
			  tin_PA1 = HAL_GetTick();     // guarda tempo p/ prox mudança estado
 8000516:	f000 fa31 	bl	800097c <HAL_GetTick>
 800051a:	6278      	str	r0, [r7, #36]	; 0x24
		      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // ligar led
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000522:	480a      	ldr	r0, [pc, #40]	; (800054c <main+0x400>)
 8000524:	f000 fcf3 	bl	8000f0e <HAL_GPIO_WritePin>
		      sttPA1 = LIG_PA1;            // muda o prox estado da máquina
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <main+0x3f8>)
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
		    }
		    break;
 800052e:	e001      	b.n	8000534 <main+0x3e8>
		    break;
 8000530:	bf00      	nop
 8000532:	e639      	b.n	80001a8 <main+0x5c>
		    break;
 8000534:	bf00      	nop
	modo = get_modo_oper();
 8000536:	e637      	b.n	80001a8 <main+0x5c>
 8000538:	2000002f 	.word	0x2000002f
 800053c:	40010c00 	.word	0x40010c00
 8000540:	20000038 	.word	0x20000038
 8000544:	20000030 	.word	0x20000030
 8000548:	20000028 	.word	0x20000028
 800054c:	40011000 	.word	0x40011000

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b090      	sub	sp, #64	; 0x40
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	2228      	movs	r2, #40	; 0x28
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f001 f91c 	bl	800179c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000572:	2301      	movs	r3, #1
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800058e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0318 	add.w	r3, r7, #24
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fcf3 	bl	8000f84 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a4:	f000 f8b4 	bl	8000710 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2102      	movs	r1, #2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 ff5e 	bl	8001484 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ce:	f000 f89f 	bl	8000710 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3740      	adds	r7, #64	; 0x40
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2008      	movs	r0, #8
 80005e4:	f000 faab 	bl	8000b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005e8:	2008      	movs	r0, #8
 80005ea:	f000 fac4 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	2009      	movs	r0, #9
 80005f4:	f000 faa3 	bl	8000b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005f8:	2009      	movs	r0, #9
 80005fa:	f000 fabc 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	2007      	movs	r0, #7
 8000604:	f000 fa9b 	bl	8000b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000608:	2007      	movs	r0, #7
 800060a:	f000 fab4 	bl	8000b76 <HAL_NVIC_EnableIRQ>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000628:	4b34      	ldr	r3, [pc, #208]	; (80006fc <MX_GPIO_Init+0xe8>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a33      	ldr	r2, [pc, #204]	; (80006fc <MX_GPIO_Init+0xe8>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b31      	ldr	r3, [pc, #196]	; (80006fc <MX_GPIO_Init+0xe8>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0310 	and.w	r3, r3, #16
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000640:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <MX_GPIO_Init+0xe8>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a2d      	ldr	r2, [pc, #180]	; (80006fc <MX_GPIO_Init+0xe8>)
 8000646:	f043 0320 	orr.w	r3, r3, #32
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <MX_GPIO_Init+0xe8>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0320 	and.w	r3, r3, #32
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <MX_GPIO_Init+0xe8>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <MX_GPIO_Init+0xe8>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <MX_GPIO_Init+0xe8>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <MX_GPIO_Init+0xe8>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_GPIO_Init+0xe8>)
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_GPIO_Init+0xe8>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0308 	and.w	r3, r3, #8
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068e:	481c      	ldr	r0, [pc, #112]	; (8000700 <MX_GPIO_Init+0xec>)
 8000690:	f000 fc3d 	bl	8000f0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800069a:	481a      	ldr	r0, [pc, #104]	; (8000704 <MX_GPIO_Init+0xf0>)
 800069c:	f000 fc37 	bl	8000f0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	4811      	ldr	r0, [pc, #68]	; (8000700 <MX_GPIO_Init+0xec>)
 80006ba:	f000 fa8d 	bl	8000bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006be:	230e      	movs	r3, #14
 80006c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_GPIO_Init+0xf4>)
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4619      	mov	r1, r3
 80006d0:	480e      	ldr	r0, [pc, #56]	; (800070c <MX_GPIO_Init+0xf8>)
 80006d2:	f000 fa81 	bl	8000bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4619      	mov	r1, r3
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_GPIO_Init+0xf0>)
 80006f0:	f000 fa72 	bl	8000bd8 <HAL_GPIO_Init>

}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000
 8000700:	40011000 	.word	0x40011000
 8000704:	40010c00 	.word	0x40010c00
 8000708:	10210000 	.word	0x10210000
 800070c:	40010800 	.word	0x40010800

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <HAL_MspInit+0x5c>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <HAL_MspInit+0x5c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6193      	str	r3, [r2, #24]
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_MspInit+0x5c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_MspInit+0x5c>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <HAL_MspInit+0x5c>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <HAL_MspInit+0x5c>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_MspInit+0x60>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_MspInit+0x60>)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr

080007c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c6:	f000 f8c7 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f000 fbb3 	bl	8000f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 0 */
    // se PA1=0 é porque o pino foi ativado para LOW
    if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==0)
 80007da:	2102      	movs	r1, #2
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <EXTI1_IRQHandler+0x34>)
 80007de:	f000 fb7f 	bl	8000ee0 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d10b      	bne.n	8000800 <EXTI1_IRQHandler+0x30>
    {
      ++ modo_oper;                             // incrementa modo operação
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <EXTI1_IRQHandler+0x38>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a06      	ldr	r2, [pc, #24]	; (8000808 <EXTI1_IRQHandler+0x38>)
 80007f0:	6013      	str	r3, [r2, #0]
      if (modo_oper>MAX_MODO_OPER) modo_oper=0; // se >MAX voltar modo_oper=0
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <EXTI1_IRQHandler+0x38>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d902      	bls.n	8000800 <EXTI1_IRQHandler+0x30>
 80007fa:	4b03      	ldr	r3, [pc, #12]	; (8000808 <EXTI1_IRQHandler+0x38>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
    }
  /* USER CODE END EXTI1_IRQn 0 */}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40010800 	.word	0x40010800
 8000808:	20000048 	.word	0x20000048

0800080c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000810:	2004      	movs	r0, #4
 8000812:	f000 fb95 	bl	8000f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI1_IRQn 0 */
	  // se PA1=0 é porque o pino foi ativado para LOW
	  if (0==0)
	  {
	    ++ modo_oper;                             // incrementa modo operação
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <EXTI3_IRQHandler+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	4a07      	ldr	r2, [pc, #28]	; (8000844 <EXTI3_IRQHandler+0x28>)
 8000828:	6013      	str	r3, [r2, #0]
	    if (modo_oper>MAX_MODO_OPER) modo_oper=0; // se >MAX voltar modo_oper=0
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <EXTI3_IRQHandler+0x28>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b03      	cmp	r3, #3
 8000830:	d902      	bls.n	8000838 <EXTI3_IRQHandler+0x1c>
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <EXTI3_IRQHandler+0x28>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
	  }
	/* USER CODE END EXTI1_IRQn 0 */  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000838:	2008      	movs	r0, #8
 800083a:	f000 fb81 	bl	8000f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000048 	.word	0x20000048

08000848 <get_modo_oper>:

/* USER CODE BEGIN 1 */
// fn que qpenas retorna o valor da var modo_oper
int get_modo_oper(void){
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  static int x;                        // var local recebe modo_oper
  // OBS: seção crítica, desabilitamos todas as IRQs p/ atualizar var
  __disable_irq();                     // desabilita IRQs
  x = modo_oper;                       // faz x = modo_oper
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <get_modo_oper+0x24>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <get_modo_oper+0x28>)
 8000858:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800085a:	b662      	cpsie	i
}
 800085c:	bf00      	nop
  __enable_irq();                      // volta habilitar IRQs
  return x;                            // retorna x (=modo_oper)
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <get_modo_oper+0x28>)
 8000860:	681b      	ldr	r3, [r3, #0]
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000048 	.word	0x20000048
 8000870:	20000034 	.word	0x20000034

08000874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	; (80008c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008a6:	f7ff ffe5 	bl	8000874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f000 ff53 	bl	8001754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ae:	f7ff fc4d 	bl	800014c <main>
  bx lr
 80008b2:	4770      	bx	lr
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008bc:	080017ec 	.word	0x080017ec
  ldr r2, =_sbss
 80008c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c4:	20000050 	.word	0x20000050

080008c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_2_IRQHandler>
	...

080008cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x28>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x28>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f923 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	200f      	movs	r0, #15
 80008e4:	f000 f808 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff ff18 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x54>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x58>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f93b 	bl	8000b92 <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f903 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x5c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	20000008 	.word	0x20000008
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x1c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x20>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a03      	ldr	r2, [pc, #12]	; (8000978 <HAL_IncTick+0x20>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000008 	.word	0x20000008
 8000978:	2000004c 	.word	0x2000004c

0800097c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b02      	ldr	r3, [pc, #8]	; (800098c <HAL_GetTick+0x10>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	2000004c 	.word	0x2000004c

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db0b      	blt.n	8000a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 021f 	and.w	r2, r3, #31
 8000a0c:	4906      	ldr	r1, [pc, #24]	; (8000a28 <__NVIC_EnableIRQ+0x34>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff90 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff2d 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff42 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff90 	bl	8000a80 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5f 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff35 	bl	80009f4 <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa2 	bl	8000ae4 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 031f 	and.w	r3, r3, #31
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_EXTI_GenerateSWI+0x28>)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6113      	str	r3, [r2, #16]
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	40010400 	.word	0x40010400

08000bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b08b      	sub	sp, #44	; 0x2c
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bea:	e169      	b.n	8000ec0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bec:	2201      	movs	r2, #1
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	f040 8158 	bne.w	8000eba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	4a9a      	ldr	r2, [pc, #616]	; (8000e78 <HAL_GPIO_Init+0x2a0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d05e      	beq.n	8000cd2 <HAL_GPIO_Init+0xfa>
 8000c14:	4a98      	ldr	r2, [pc, #608]	; (8000e78 <HAL_GPIO_Init+0x2a0>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d875      	bhi.n	8000d06 <HAL_GPIO_Init+0x12e>
 8000c1a:	4a98      	ldr	r2, [pc, #608]	; (8000e7c <HAL_GPIO_Init+0x2a4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d058      	beq.n	8000cd2 <HAL_GPIO_Init+0xfa>
 8000c20:	4a96      	ldr	r2, [pc, #600]	; (8000e7c <HAL_GPIO_Init+0x2a4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d86f      	bhi.n	8000d06 <HAL_GPIO_Init+0x12e>
 8000c26:	4a96      	ldr	r2, [pc, #600]	; (8000e80 <HAL_GPIO_Init+0x2a8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d052      	beq.n	8000cd2 <HAL_GPIO_Init+0xfa>
 8000c2c:	4a94      	ldr	r2, [pc, #592]	; (8000e80 <HAL_GPIO_Init+0x2a8>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d869      	bhi.n	8000d06 <HAL_GPIO_Init+0x12e>
 8000c32:	4a94      	ldr	r2, [pc, #592]	; (8000e84 <HAL_GPIO_Init+0x2ac>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d04c      	beq.n	8000cd2 <HAL_GPIO_Init+0xfa>
 8000c38:	4a92      	ldr	r2, [pc, #584]	; (8000e84 <HAL_GPIO_Init+0x2ac>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d863      	bhi.n	8000d06 <HAL_GPIO_Init+0x12e>
 8000c3e:	4a92      	ldr	r2, [pc, #584]	; (8000e88 <HAL_GPIO_Init+0x2b0>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d046      	beq.n	8000cd2 <HAL_GPIO_Init+0xfa>
 8000c44:	4a90      	ldr	r2, [pc, #576]	; (8000e88 <HAL_GPIO_Init+0x2b0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d85d      	bhi.n	8000d06 <HAL_GPIO_Init+0x12e>
 8000c4a:	2b12      	cmp	r3, #18
 8000c4c:	d82a      	bhi.n	8000ca4 <HAL_GPIO_Init+0xcc>
 8000c4e:	2b12      	cmp	r3, #18
 8000c50:	d859      	bhi.n	8000d06 <HAL_GPIO_Init+0x12e>
 8000c52:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <HAL_GPIO_Init+0x80>)
 8000c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c58:	08000cd3 	.word	0x08000cd3
 8000c5c:	08000cad 	.word	0x08000cad
 8000c60:	08000cbf 	.word	0x08000cbf
 8000c64:	08000d01 	.word	0x08000d01
 8000c68:	08000d07 	.word	0x08000d07
 8000c6c:	08000d07 	.word	0x08000d07
 8000c70:	08000d07 	.word	0x08000d07
 8000c74:	08000d07 	.word	0x08000d07
 8000c78:	08000d07 	.word	0x08000d07
 8000c7c:	08000d07 	.word	0x08000d07
 8000c80:	08000d07 	.word	0x08000d07
 8000c84:	08000d07 	.word	0x08000d07
 8000c88:	08000d07 	.word	0x08000d07
 8000c8c:	08000d07 	.word	0x08000d07
 8000c90:	08000d07 	.word	0x08000d07
 8000c94:	08000d07 	.word	0x08000d07
 8000c98:	08000d07 	.word	0x08000d07
 8000c9c:	08000cb5 	.word	0x08000cb5
 8000ca0:	08000cc9 	.word	0x08000cc9
 8000ca4:	4a79      	ldr	r2, [pc, #484]	; (8000e8c <HAL_GPIO_Init+0x2b4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d013      	beq.n	8000cd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000caa:	e02c      	b.n	8000d06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	623b      	str	r3, [r7, #32]
          break;
 8000cb2:	e029      	b.n	8000d08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	623b      	str	r3, [r7, #32]
          break;
 8000cbc:	e024      	b.n	8000d08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	3308      	adds	r3, #8
 8000cc4:	623b      	str	r3, [r7, #32]
          break;
 8000cc6:	e01f      	b.n	8000d08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	330c      	adds	r3, #12
 8000cce:	623b      	str	r3, [r7, #32]
          break;
 8000cd0:	e01a      	b.n	8000d08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d102      	bne.n	8000ce0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e013      	b.n	8000d08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d105      	bne.n	8000cf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69fa      	ldr	r2, [r7, #28]
 8000cf0:	611a      	str	r2, [r3, #16]
          break;
 8000cf2:	e009      	b.n	8000d08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	615a      	str	r2, [r3, #20]
          break;
 8000cfe:	e003      	b.n	8000d08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
          break;
 8000d04:	e000      	b.n	8000d08 <HAL_GPIO_Init+0x130>
          break;
 8000d06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	2bff      	cmp	r3, #255	; 0xff
 8000d0c:	d801      	bhi.n	8000d12 <HAL_GPIO_Init+0x13a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	e001      	b.n	8000d16 <HAL_GPIO_Init+0x13e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3304      	adds	r3, #4
 8000d16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	2bff      	cmp	r3, #255	; 0xff
 8000d1c:	d802      	bhi.n	8000d24 <HAL_GPIO_Init+0x14c>
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	e002      	b.n	8000d2a <HAL_GPIO_Init+0x152>
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	3b08      	subs	r3, #8
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	210f      	movs	r1, #15
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	6a39      	ldr	r1, [r7, #32]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	431a      	orrs	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 80b1 	beq.w	8000eba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d58:	4b4d      	ldr	r3, [pc, #308]	; (8000e90 <HAL_GPIO_Init+0x2b8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a4c      	ldr	r2, [pc, #304]	; (8000e90 <HAL_GPIO_Init+0x2b8>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b4a      	ldr	r3, [pc, #296]	; (8000e90 <HAL_GPIO_Init+0x2b8>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d70:	4a48      	ldr	r2, [pc, #288]	; (8000e94 <HAL_GPIO_Init+0x2bc>)
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3302      	adds	r3, #2
 8000d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a40      	ldr	r2, [pc, #256]	; (8000e98 <HAL_GPIO_Init+0x2c0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d013      	beq.n	8000dc4 <HAL_GPIO_Init+0x1ec>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a3f      	ldr	r2, [pc, #252]	; (8000e9c <HAL_GPIO_Init+0x2c4>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d00d      	beq.n	8000dc0 <HAL_GPIO_Init+0x1e8>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a3e      	ldr	r2, [pc, #248]	; (8000ea0 <HAL_GPIO_Init+0x2c8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d007      	beq.n	8000dbc <HAL_GPIO_Init+0x1e4>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a3d      	ldr	r2, [pc, #244]	; (8000ea4 <HAL_GPIO_Init+0x2cc>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d101      	bne.n	8000db8 <HAL_GPIO_Init+0x1e0>
 8000db4:	2303      	movs	r3, #3
 8000db6:	e006      	b.n	8000dc6 <HAL_GPIO_Init+0x1ee>
 8000db8:	2304      	movs	r3, #4
 8000dba:	e004      	b.n	8000dc6 <HAL_GPIO_Init+0x1ee>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e002      	b.n	8000dc6 <HAL_GPIO_Init+0x1ee>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e000      	b.n	8000dc6 <HAL_GPIO_Init+0x1ee>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc8:	f002 0203 	and.w	r2, r2, #3
 8000dcc:	0092      	lsls	r2, r2, #2
 8000dce:	4093      	lsls	r3, r2
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dd6:	492f      	ldr	r1, [pc, #188]	; (8000e94 <HAL_GPIO_Init+0x2bc>)
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d006      	beq.n	8000dfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000df0:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	492c      	ldr	r1, [pc, #176]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	600b      	str	r3, [r1, #0]
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4928      	ldr	r1, [pc, #160]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	4922      	ldr	r1, [pc, #136]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	604b      	str	r3, [r1, #4]
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	491e      	ldr	r1, [pc, #120]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	4918      	ldr	r1, [pc, #96]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	608b      	str	r3, [r1, #8]
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4914      	ldr	r1, [pc, #80]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d021      	beq.n	8000eac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	60cb      	str	r3, [r1, #12]
 8000e74:	e021      	b.n	8000eba <HAL_GPIO_Init+0x2e2>
 8000e76:	bf00      	nop
 8000e78:	10320000 	.word	0x10320000
 8000e7c:	10310000 	.word	0x10310000
 8000e80:	10220000 	.word	0x10220000
 8000e84:	10210000 	.word	0x10210000
 8000e88:	10120000 	.word	0x10120000
 8000e8c:	10110000 	.word	0x10110000
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	40010c00 	.word	0x40010c00
 8000ea0:	40011000 	.word	0x40011000
 8000ea4:	40011400 	.word	0x40011400
 8000ea8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_GPIO_Init+0x304>)
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	4909      	ldr	r1, [pc, #36]	; (8000edc <HAL_GPIO_Init+0x304>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f47f ae8e 	bne.w	8000bec <HAL_GPIO_Init+0x14>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	372c      	adds	r7, #44	; 0x2c
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	40010400 	.word	0x40010400

08000ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e001      	b.n	8000f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	460b      	mov	r3, r1
 8000f18:	807b      	strh	r3, [r7, #2]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f1e:	787b      	ldrb	r3, [r7, #1]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f24:	887a      	ldrh	r2, [r7, #2]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f2a:	e003      	b.n	8000f34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	041a      	lsls	r2, r3, #16
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	611a      	str	r2, [r3, #16]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f4c:	695a      	ldr	r2, [r3, #20]
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f806 	bl	8000f70 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40010400 	.word	0x40010400

08000f70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e26c      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8087 	beq.w	80010b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa4:	4b92      	ldr	r3, [pc, #584]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d00c      	beq.n	8000fca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fb0:	4b8f      	ldr	r3, [pc, #572]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d112      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x5e>
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc8:	d10b      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fca:	4b89      	ldr	r3, [pc, #548]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d06c      	beq.n	80010b0 <HAL_RCC_OscConfig+0x12c>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d168      	bne.n	80010b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e246      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fea:	d106      	bne.n	8000ffa <HAL_RCC_OscConfig+0x76>
 8000fec:	4b80      	ldr	r3, [pc, #512]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a7f      	ldr	r2, [pc, #508]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e02e      	b.n	8001058 <HAL_RCC_OscConfig+0xd4>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x98>
 8001002:	4b7b      	ldr	r3, [pc, #492]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a7a      	ldr	r2, [pc, #488]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a77      	ldr	r2, [pc, #476]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e01d      	b.n	8001058 <HAL_RCC_OscConfig+0xd4>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0xbc>
 8001026:	4b72      	ldr	r3, [pc, #456]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a71      	ldr	r2, [pc, #452]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800102c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a6e      	ldr	r2, [pc, #440]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e00b      	b.n	8001058 <HAL_RCC_OscConfig+0xd4>
 8001040:	4b6b      	ldr	r3, [pc, #428]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a6a      	ldr	r2, [pc, #424]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b68      	ldr	r3, [pc, #416]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a67      	ldr	r2, [pc, #412]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001056:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d013      	beq.n	8001088 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fc8c 	bl	800097c <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff fc88 	bl	800097c <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b64      	cmp	r3, #100	; 0x64
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e1fa      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	4b5d      	ldr	r3, [pc, #372]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f0      	beq.n	8001068 <HAL_RCC_OscConfig+0xe4>
 8001086:	e014      	b.n	80010b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fc78 	bl	800097c <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001090:	f7ff fc74 	bl	800097c <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b64      	cmp	r3, #100	; 0x64
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e1e6      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a2:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f0      	bne.n	8001090 <HAL_RCC_OscConfig+0x10c>
 80010ae:	e000      	b.n	80010b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d063      	beq.n	8001186 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010be:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00b      	beq.n	80010e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ca:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d11c      	bne.n	8001110 <HAL_RCC_OscConfig+0x18c>
 80010d6:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d116      	bne.n	8001110 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e2:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d005      	beq.n	80010fa <HAL_RCC_OscConfig+0x176>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d001      	beq.n	80010fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e1ba      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fa:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4939      	ldr	r1, [pc, #228]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110e:	e03a      	b.n	8001186 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d020      	beq.n	800115a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fc2d 	bl	800097c <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001126:	f7ff fc29 	bl	800097c <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e19b      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4927      	ldr	r1, [pc, #156]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001154:	4313      	orrs	r3, r2
 8001156:	600b      	str	r3, [r1, #0]
 8001158:	e015      	b.n	8001186 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fc0c 	bl	800097c <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001168:	f7ff fc08 	bl	800097c <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e17a      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d03a      	beq.n	8001208 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d019      	beq.n	80011ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_RCC_OscConfig+0x274>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a0:	f7ff fbec 	bl	800097c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a8:	f7ff fbe8 	bl	800097c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e15a      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f000 faa6 	bl	8001718 <RCC_Delay>
 80011cc:	e01c      	b.n	8001208 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_RCC_OscConfig+0x274>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d4:	f7ff fbd2 	bl	800097c <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011da:	e00f      	b.n	80011fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fbce 	bl	800097c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d908      	bls.n	80011fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e140      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	42420000 	.word	0x42420000
 80011f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fc:	4b9e      	ldr	r3, [pc, #632]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1e9      	bne.n	80011dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80a6 	beq.w	8001362 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121a:	4b97      	ldr	r3, [pc, #604]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10d      	bne.n	8001242 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b94      	ldr	r3, [pc, #592]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a93      	ldr	r2, [pc, #588]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b91      	ldr	r3, [pc, #580]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800123e:	2301      	movs	r3, #1
 8001240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001242:	4b8e      	ldr	r3, [pc, #568]	; (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	2b00      	cmp	r3, #0
 800124c:	d118      	bne.n	8001280 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800124e:	4b8b      	ldr	r3, [pc, #556]	; (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a8a      	ldr	r2, [pc, #552]	; (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800125a:	f7ff fb8f 	bl	800097c <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001262:	f7ff fb8b 	bl	800097c <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b64      	cmp	r3, #100	; 0x64
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e0fd      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001274:	4b81      	ldr	r3, [pc, #516]	; (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d106      	bne.n	8001296 <HAL_RCC_OscConfig+0x312>
 8001288:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4a7a      	ldr	r2, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6213      	str	r3, [r2, #32]
 8001294:	e02d      	b.n	80012f2 <HAL_RCC_OscConfig+0x36e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x334>
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a75      	ldr	r2, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	6213      	str	r3, [r2, #32]
 80012aa:	4b73      	ldr	r3, [pc, #460]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4a72      	ldr	r2, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	f023 0304 	bic.w	r3, r3, #4
 80012b4:	6213      	str	r3, [r2, #32]
 80012b6:	e01c      	b.n	80012f2 <HAL_RCC_OscConfig+0x36e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d10c      	bne.n	80012da <HAL_RCC_OscConfig+0x356>
 80012c0:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6213      	str	r3, [r2, #32]
 80012cc:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4a69      	ldr	r2, [pc, #420]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6213      	str	r3, [r2, #32]
 80012d8:	e00b      	b.n	80012f2 <HAL_RCC_OscConfig+0x36e>
 80012da:	4b67      	ldr	r3, [pc, #412]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4a66      	ldr	r2, [pc, #408]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	6213      	str	r3, [r2, #32]
 80012e6:	4b64      	ldr	r3, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4a63      	ldr	r2, [pc, #396]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	f023 0304 	bic.w	r3, r3, #4
 80012f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d015      	beq.n	8001326 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fb3f 	bl	800097c <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	f7ff fb3b 	bl	800097c <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e0ab      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001318:	4b57      	ldr	r3, [pc, #348]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0ee      	beq.n	8001302 <HAL_RCC_OscConfig+0x37e>
 8001324:	e014      	b.n	8001350 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff fb29 	bl	800097c <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132c:	e00a      	b.n	8001344 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f7ff fb25 	bl	800097c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f241 3288 	movw	r2, #5000	; 0x1388
 800133c:	4293      	cmp	r3, r2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e095      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001344:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1ee      	bne.n	800132e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d105      	bne.n	8001362 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001356:	4b48      	ldr	r3, [pc, #288]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a47      	ldr	r2, [pc, #284]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800135c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001360:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8081 	beq.w	800146e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800136c:	4b42      	ldr	r3, [pc, #264]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d061      	beq.n	800143c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d146      	bne.n	800140e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001380:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_RCC_OscConfig+0x4fc>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff faf9 	bl	800097c <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff faf5 	bl	800097c <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e067      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d108      	bne.n	80013c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	492d      	ldr	r1, [pc, #180]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a19      	ldr	r1, [r3, #32]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	430b      	orrs	r3, r1
 80013da:	4927      	ldr	r1, [pc, #156]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x4fc>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fac9 	bl	800097c <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ee:	f7ff fac5 	bl	800097c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e037      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x46a>
 800140c:	e02f      	b.n	800146e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_RCC_OscConfig+0x4fc>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fab2 	bl	800097c <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff faae 	bl	800097c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e020      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x498>
 800143a:	e018      	b.n	800146e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e013      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	429a      	cmp	r2, r3
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	40007000 	.word	0x40007000
 8001480:	42420060 	.word	0x42420060

08001484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0d0      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001498:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d910      	bls.n	80014c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b67      	ldr	r3, [pc, #412]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 0207 	bic.w	r2, r3, #7
 80014ae:	4965      	ldr	r1, [pc, #404]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b6:	4b63      	ldr	r3, [pc, #396]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0b8      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d020      	beq.n	8001516 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e0:	4b59      	ldr	r3, [pc, #356]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a58      	ldr	r2, [pc, #352]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f8:	4b53      	ldr	r3, [pc, #332]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a52      	ldr	r2, [pc, #328]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001502:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001504:	4b50      	ldr	r3, [pc, #320]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	494d      	ldr	r1, [pc, #308]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d040      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d115      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e07f      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001542:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e073      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e06b      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001562:	4b39      	ldr	r3, [pc, #228]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f023 0203 	bic.w	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4936      	ldr	r1, [pc, #216]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001574:	f7ff fa02 	bl	800097c <HAL_GetTick>
 8001578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	e00a      	b.n	8001592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157c:	f7ff f9fe 	bl	800097c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e053      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 020c 	and.w	r2, r3, #12
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d1eb      	bne.n	800157c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d210      	bcs.n	80015d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 0207 	bic.w	r2, r3, #7
 80015ba:	4922      	ldr	r1, [pc, #136]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e032      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	4916      	ldr	r1, [pc, #88]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d009      	beq.n	8001612 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	490e      	ldr	r1, [pc, #56]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001612:	f000 f821 	bl	8001658 <HAL_RCC_GetSysClockFreq>
 8001616:	4602      	mov	r2, r0
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	490a      	ldr	r1, [pc, #40]	; (800164c <HAL_RCC_ClockConfig+0x1c8>)
 8001624:	5ccb      	ldrb	r3, [r1, r3]
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <HAL_RCC_ClockConfig+0x1cc>)
 800162c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_RCC_ClockConfig+0x1d0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f960 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40022000 	.word	0x40022000
 8001648:	40021000 	.word	0x40021000
 800164c:	080017d4 	.word	0x080017d4
 8001650:	20000000 	.word	0x20000000
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001658:	b490      	push	{r4, r7}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001660:	1d3c      	adds	r4, r7, #4
 8001662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001668:	f240 2301 	movw	r3, #513	; 0x201
 800166c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b04      	cmp	r3, #4
 8001690:	d002      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0x40>
 8001692:	2b08      	cmp	r3, #8
 8001694:	d003      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0x46>
 8001696:	e02d      	b.n	80016f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCC_GetSysClockFreq+0xb8>)
 800169a:	623b      	str	r3, [r7, #32]
      break;
 800169c:	e02d      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	0c9b      	lsrs	r3, r3, #18
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016aa:	4413      	add	r3, r2
 80016ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_RCC_GetSysClockFreq+0xb4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	0c5b      	lsrs	r3, r3, #17
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016ca:	4413      	add	r3, r2
 80016cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d6:	fb02 f203 	mul.w	r2, r2, r3
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
 80016e2:	e004      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	623b      	str	r3, [r7, #32]
      break;
 80016f2:	e002      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f6:	623b      	str	r3, [r7, #32]
      break;
 80016f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016fa:	6a3b      	ldr	r3, [r7, #32]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bc90      	pop	{r4, r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	080017c4 	.word	0x080017c4
 800170c:	40021000 	.word	0x40021000
 8001710:	007a1200 	.word	0x007a1200
 8001714:	003d0900 	.word	0x003d0900

08001718 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <RCC_Delay+0x34>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <RCC_Delay+0x38>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0a5b      	lsrs	r3, r3, #9
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001734:	bf00      	nop
  }
  while (Delay --);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1e5a      	subs	r2, r3, #1
 800173a:	60fa      	str	r2, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f9      	bne.n	8001734 <RCC_Delay+0x1c>
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	20000000 	.word	0x20000000
 8001750:	10624dd3 	.word	0x10624dd3

08001754 <__libc_init_array>:
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	2600      	movs	r6, #0
 8001758:	4d0c      	ldr	r5, [pc, #48]	; (800178c <__libc_init_array+0x38>)
 800175a:	4c0d      	ldr	r4, [pc, #52]	; (8001790 <__libc_init_array+0x3c>)
 800175c:	1b64      	subs	r4, r4, r5
 800175e:	10a4      	asrs	r4, r4, #2
 8001760:	42a6      	cmp	r6, r4
 8001762:	d109      	bne.n	8001778 <__libc_init_array+0x24>
 8001764:	f000 f822 	bl	80017ac <_init>
 8001768:	2600      	movs	r6, #0
 800176a:	4d0a      	ldr	r5, [pc, #40]	; (8001794 <__libc_init_array+0x40>)
 800176c:	4c0a      	ldr	r4, [pc, #40]	; (8001798 <__libc_init_array+0x44>)
 800176e:	1b64      	subs	r4, r4, r5
 8001770:	10a4      	asrs	r4, r4, #2
 8001772:	42a6      	cmp	r6, r4
 8001774:	d105      	bne.n	8001782 <__libc_init_array+0x2e>
 8001776:	bd70      	pop	{r4, r5, r6, pc}
 8001778:	f855 3b04 	ldr.w	r3, [r5], #4
 800177c:	4798      	blx	r3
 800177e:	3601      	adds	r6, #1
 8001780:	e7ee      	b.n	8001760 <__libc_init_array+0xc>
 8001782:	f855 3b04 	ldr.w	r3, [r5], #4
 8001786:	4798      	blx	r3
 8001788:	3601      	adds	r6, #1
 800178a:	e7f2      	b.n	8001772 <__libc_init_array+0x1e>
 800178c:	080017e4 	.word	0x080017e4
 8001790:	080017e4 	.word	0x080017e4
 8001794:	080017e4 	.word	0x080017e4
 8001798:	080017e8 	.word	0x080017e8

0800179c <memset>:
 800179c:	4603      	mov	r3, r0
 800179e:	4402      	add	r2, r0
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d100      	bne.n	80017a6 <memset+0xa>
 80017a4:	4770      	bx	lr
 80017a6:	f803 1b01 	strb.w	r1, [r3], #1
 80017aa:	e7f9      	b.n	80017a0 <memset+0x4>

080017ac <_init>:
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ae:	bf00      	nop
 80017b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b2:	bc08      	pop	{r3}
 80017b4:	469e      	mov	lr, r3
 80017b6:	4770      	bx	lr

080017b8 <_fini>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	bf00      	nop
 80017bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017be:	bc08      	pop	{r3}
 80017c0:	469e      	mov	lr, r3
 80017c2:	4770      	bx	lr
