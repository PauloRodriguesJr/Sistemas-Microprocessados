
projeto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002944  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a70  08002a70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a70  08002a70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a70  08002a70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002a84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002a84  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a30  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e2  00000000  00000000  00028a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002a148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002ab10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016764  00000000  00000000  0002b420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0b0  00000000  00000000  00041b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008434c  00000000  00000000  0004bc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cff80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002820  00000000  00000000  000cffd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a38 	.word	0x08002a38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002a38 	.word	0x08002a38

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b098      	sub	sp, #96	; 0x60
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 ff1b 	bl	8000f8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 fc83 	bl	8000a60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 fd49 	bl	8000bf0 <MX_GPIO_Init>
	MX_TIM4_Init();
 800015e:	f000 fcd1 	bl	8000b04 <MX_TIM4_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000162:	f000 fcc2 	bl	8000aea <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	// garantir que PC13 começa desligado
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000166:	2201      	movs	r2, #1
 8000168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016c:	48b4      	ldr	r0, [pc, #720]	; (8000440 <main+0x2f4>)
 800016e:	f001 fa46 	bl	80015fe <HAL_GPIO_WritePin>
		INI_PWM, INC_PWM, DEC_PWM} sttGAUGE = INI_PWM; // var de estados do gauge PWM
	static enum {
		INI_CRON, INC_CRON, PAUSE_CRON} sttCRON = INI_CRON; // var estados do cronometro

	// para controlar vars tempos de entrada na rotina ON/OFF de cada LED
	uint32_t tin_D1 = 0, tin_D2 = 0, tin_D3 = 0, tin_D4 = 0, tin_PWM = 0;
 8000172:	2300      	movs	r3, #0
 8000174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000176:	2300      	movs	r3, #0
 8000178:	65bb      	str	r3, [r7, #88]	; 0x58
 800017a:	2300      	movs	r3, #0
 800017c:	657b      	str	r3, [r7, #84]	; 0x54
 800017e:	2300      	movs	r3, #0
 8000180:	653b      	str	r3, [r7, #80]	; 0x50
 8000182:	2300      	movs	r3, #0
 8000184:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t tin_CRON = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t dt_PA1 = PR, dt_PA2 = PR,  dt_PA3 = PR; // proximos dt p/ cada PA
 800018a:	2350      	movs	r3, #80	; 0x50
 800018c:	637b      	str	r3, [r7, #52]	; 0x34
 800018e:	2350      	movs	r3, #80	; 0x50
 8000190:	633b      	str	r3, [r7, #48]	; 0x30
 8000192:	2350      	movs	r3, #80	; 0x50
 8000194:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t tin_PA1 = 0, tin_PA2 = 0, tin_PA3 = 0; // dts das interrupções por software
 8000196:	2300      	movs	r3, #0
 8000198:	647b      	str	r3, [r7, #68]	; 0x44
 800019a:	2300      	movs	r3, #0
 800019c:	643b      	str	r3, [r7, #64]	; 0x40
 800019e:	2300      	movs	r3, #0
 80001a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	mn_tin_CRON = 0;
 80001a2:	4ba8      	ldr	r3, [pc, #672]	; (8000444 <main+0x2f8>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]

	int dt_PWM = PER_PWM / (2 * PWM_ARR);   // calc delta tempo p/ PB7
 80001a8:	2307      	movs	r3, #7
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28

	int modo = get_modo_oper();          // inicia modo como 0
 80001ac:	f000 fe74 	bl	8000e98 <get_modo_oper>
 80001b0:	6278      	str	r0, [r7, #36]	; 0x24
	int start_status = get_cron_start_status();
 80001b2:	f000 fe87 	bl	8000ec4 <get_cron_start_status>
 80001b6:	6238      	str	r0, [r7, #32]
	int clear_signal = get_cron_clear_status();
 80001b8:	f000 fe9a 	bl	8000ef0 <get_cron_clear_status>
 80001bc:	61f8      	str	r0, [r7, #28]
	uint16_t dc_PWM = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	877b      	strh	r3, [r7, #58]	; 0x3a

	// inicializar o PWM do timer 4 ch 2 zerado
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // inicializa PWM no T4C2
 80001c2:	2104      	movs	r1, #4
 80001c4:	48a0      	ldr	r0, [pc, #640]	; (8000448 <main+0x2fc>)
 80001c6:	f001 fee5 	bl	8001f94 <HAL_TIM_PWM_Start>
	TIM4->CCR2 = dc_PWM;                // inicia comparador PWM c/ 0
 80001ca:	4aa0      	ldr	r2, [pc, #640]	; (800044c <main+0x300>)
 80001cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80001ce:	6393      	str	r3, [r2, #56]	; 0x38

	// estrutura de dados para programar pedido de interrupção por software
	EXTI_HandleTypeDef hexti_1 = { };
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
	hexti_1.Line = EXTI_LINE_1;
 80001da:	4b9d      	ldr	r3, [pc, #628]	; (8000450 <main+0x304>)
 80001dc:	617b      	str	r3, [r7, #20]
	EXTI_HandleTypeDef hexti_2 = { };
 80001de:	f107 030c 	add.w	r3, r7, #12
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
	hexti_2.Line = EXTI_LINE_2;
 80001e8:	4b9a      	ldr	r3, [pc, #616]	; (8000454 <main+0x308>)
 80001ea:	60fb      	str	r3, [r7, #12]
    EXTI_HandleTypeDef hexti_3 = {};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
    hexti_3.Line = EXTI_LINE_3;
 80001f4:	4b98      	ldr	r3, [pc, #608]	; (8000458 <main+0x30c>)
 80001f6:	607b      	str	r3, [r7, #4]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		modo = get_modo_oper();
 80001f8:	f000 fe4e 	bl	8000e98 <get_modo_oper>
 80001fc:	6278      	str	r0, [r7, #36]	; 0x24

		if (modo == 0) {
 80001fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000200:	2b00      	cmp	r3, #0
 8000202:	f040 819a 	bne.w	800053a <main+0x3ee>
			// Caso pisca independentes:
			// Cada LED piscando com um periodo especifico DT_Di, i={1,2,3,4}

			// controle do estado do LED D1
			switch (sttD1) {
 8000206:	4b95      	ldr	r3, [pc, #596]	; (800045c <main+0x310>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b02      	cmp	r3, #2
 800020c:	d039      	beq.n	8000282 <main+0x136>
 800020e:	2b02      	cmp	r3, #2
 8000210:	dc57      	bgt.n	80002c2 <main+0x176>
 8000212:	2b00      	cmp	r3, #0
 8000214:	d002      	beq.n	800021c <main+0xd0>
 8000216:	2b01      	cmp	r3, #1
 8000218:	d016      	beq.n	8000248 <main+0xfc>
 800021a:	e052      	b.n	80002c2 <main+0x176>
			case INI_D1:                 // vai iniciar a máquina de estado
				tin_D1 = HAL_GetTick();    // tempo inicial que iniciou a tarefa
 800021c:	f000 ff0e 	bl	800103c <HAL_GetTick>
 8000220:	65f8      	str	r0, [r7, #92]	; 0x5c
				sttD1 = LIG_D1;            // prox estado da máquina
 8000222:	4b8e      	ldr	r3, [pc, #568]	; (800045c <main+0x310>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // desl o LED
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800022e:	488c      	ldr	r0, [pc, #560]	; (8000460 <main+0x314>)
 8000230:	f001 f9e5 	bl	80015fe <HAL_GPIO_WritePin>
				mn_led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000238:	4889      	ldr	r0, [pc, #548]	; (8000460 <main+0x314>)
 800023a:	f001 f9c9 	bl	80015d0 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	461a      	mov	r2, r3
 8000242:	4b88      	ldr	r3, [pc, #544]	; (8000464 <main+0x318>)
 8000244:	601a      	str	r2, [r3, #0]
				break;
 8000246:	e03c      	b.n	80002c2 <main+0x176>
			case LIG_D1:                 // estado para ligar o LED
				if ((HAL_GetTick() - tin_D1) > DT_D1) // se HAL_GetTick()-tin_D1 > DT_D1
 8000248:	f000 fef8 	bl	800103c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	2bc8      	cmp	r3, #200	; 0xc8
 8000254:	d932      	bls.n	80002bc <main+0x170>
				{
					tin_D1 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 8000256:	f000 fef1 	bl	800103c <HAL_GetTick>
 800025a:	65f8      	str	r0, [r7, #92]	; 0x5c
					sttD1 = DSLG_D1;         // muda o prox estado da máquina
 800025c:	4b7f      	ldr	r3, [pc, #508]	; (800045c <main+0x310>)
 800025e:	2202      	movs	r2, #2
 8000260:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // ligaLED
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000268:	487d      	ldr	r0, [pc, #500]	; (8000460 <main+0x314>)
 800026a:	f001 f9c8 	bl	80015fe <HAL_GPIO_WritePin>
					mn_led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800026e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000272:	487b      	ldr	r0, [pc, #492]	; (8000460 <main+0x314>)
 8000274:	f001 f9ac 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000278:	4603      	mov	r3, r0
 800027a:	461a      	mov	r2, r3
 800027c:	4b79      	ldr	r3, [pc, #484]	; (8000464 <main+0x318>)
 800027e:	601a      	str	r2, [r3, #0]
				}
				break;
 8000280:	e01c      	b.n	80002bc <main+0x170>
			case DSLG_D1:                // estado para desligar o LED
				if ((HAL_GetTick() - tin_D1) > DT_D1) // se HAL_GetTick()-tin_D1 > DT_D1
 8000282:	f000 fedb 	bl	800103c <HAL_GetTick>
 8000286:	4602      	mov	r2, r0
 8000288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800028a:	1ad3      	subs	r3, r2, r3
 800028c:	2bc8      	cmp	r3, #200	; 0xc8
 800028e:	d917      	bls.n	80002c0 <main+0x174>
				{
					tin_D1 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 8000290:	f000 fed4 	bl	800103c <HAL_GetTick>
 8000294:	65f8      	str	r0, [r7, #92]	; 0x5c
					sttD1 = LIG_D1;          // muda o prox estado da máquina
 8000296:	4b71      	ldr	r3, [pc, #452]	; (800045c <main+0x310>)
 8000298:	2201      	movs	r2, #1
 800029a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // desl LED			}
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002a2:	486f      	ldr	r0, [pc, #444]	; (8000460 <main+0x314>)
 80002a4:	f001 f9ab 	bl	80015fe <HAL_GPIO_WritePin>
					mn_led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80002a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ac:	486c      	ldr	r0, [pc, #432]	; (8000460 <main+0x314>)
 80002ae:	f001 f98f 	bl	80015d0 <HAL_GPIO_ReadPin>
 80002b2:	4603      	mov	r3, r0
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b6b      	ldr	r3, [pc, #428]	; (8000464 <main+0x318>)
 80002b8:	601a      	str	r2, [r3, #0]
				}
				break;
 80002ba:	e001      	b.n	80002c0 <main+0x174>
				break;
 80002bc:	bf00      	nop
 80002be:	e000      	b.n	80002c2 <main+0x176>
				break;
 80002c0:	bf00      	nop
			};

			// controle do estado do LED D2
			switch (sttD2) {
 80002c2:	4b69      	ldr	r3, [pc, #420]	; (8000468 <main+0x31c>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d03a      	beq.n	8000340 <main+0x1f4>
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	dc59      	bgt.n	8000382 <main+0x236>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d002      	beq.n	80002d8 <main+0x18c>
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d016      	beq.n	8000304 <main+0x1b8>
 80002d6:	e054      	b.n	8000382 <main+0x236>
			case INI_D2:                 // vai iniciar a máquina de estado
				tin_D2 = HAL_GetTick();    // tempo inicial que iniciou a tarefa
 80002d8:	f000 feb0 	bl	800103c <HAL_GetTick>
 80002dc:	65b8      	str	r0, [r7, #88]	; 0x58
				sttD2 = LIG_D2;            // prox estado da máquina
 80002de:	4b62      	ldr	r3, [pc, #392]	; (8000468 <main+0x31c>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // desl o LED
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ea:	485d      	ldr	r0, [pc, #372]	; (8000460 <main+0x314>)
 80002ec:	f001 f987 	bl	80015fe <HAL_GPIO_WritePin>
				mn_led2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80002f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002f4:	485a      	ldr	r0, [pc, #360]	; (8000460 <main+0x314>)
 80002f6:	f001 f96b 	bl	80015d0 <HAL_GPIO_ReadPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	461a      	mov	r2, r3
 80002fe:	4b5b      	ldr	r3, [pc, #364]	; (800046c <main+0x320>)
 8000300:	601a      	str	r2, [r3, #0]
				break;
 8000302:	e03e      	b.n	8000382 <main+0x236>
			case LIG_D2:                 // estado para ligar o LED
				if ((HAL_GetTick() - tin_D2) > DT_D2) // se HAL_GetTick()-tin_D2 > DT_D2
 8000304:	f000 fe9a 	bl	800103c <HAL_GetTick>
 8000308:	4602      	mov	r2, r0
 800030a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000312:	d933      	bls.n	800037c <main+0x230>
				{
					tin_D2 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 8000314:	f000 fe92 	bl	800103c <HAL_GetTick>
 8000318:	65b8      	str	r0, [r7, #88]	; 0x58
					sttD2 = DSLG_D2;         // muda o prox estado da máquina
 800031a:	4b53      	ldr	r3, [pc, #332]	; (8000468 <main+0x31c>)
 800031c:	2202      	movs	r2, #2
 800031e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // ligaLED
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000326:	484e      	ldr	r0, [pc, #312]	; (8000460 <main+0x314>)
 8000328:	f001 f969 	bl	80015fe <HAL_GPIO_WritePin>
					mn_led2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800032c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000330:	484b      	ldr	r0, [pc, #300]	; (8000460 <main+0x314>)
 8000332:	f001 f94d 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000336:	4603      	mov	r3, r0
 8000338:	461a      	mov	r2, r3
 800033a:	4b4c      	ldr	r3, [pc, #304]	; (800046c <main+0x320>)
 800033c:	601a      	str	r2, [r3, #0]
				}
				break;
 800033e:	e01d      	b.n	800037c <main+0x230>
			case DSLG_D2:                // estado para desligar o LED
				if ((HAL_GetTick() - tin_D2) > DT_D2) // se HAL_GetTick()-tin_D2 > DT_D2
 8000340:	f000 fe7c 	bl	800103c <HAL_GetTick>
 8000344:	4602      	mov	r2, r0
 8000346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000348:	1ad3      	subs	r3, r2, r3
 800034a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800034e:	d917      	bls.n	8000380 <main+0x234>
				{
					tin_D2 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 8000350:	f000 fe74 	bl	800103c <HAL_GetTick>
 8000354:	65b8      	str	r0, [r7, #88]	; 0x58
					sttD2 = LIG_D2;          // muda o prox estado da máquina
 8000356:	4b44      	ldr	r3, [pc, #272]	; (8000468 <main+0x31c>)
 8000358:	2201      	movs	r2, #1
 800035a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // desl LED
 800035c:	2201      	movs	r2, #1
 800035e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000362:	483f      	ldr	r0, [pc, #252]	; (8000460 <main+0x314>)
 8000364:	f001 f94b 	bl	80015fe <HAL_GPIO_WritePin>
					mn_led2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036c:	483c      	ldr	r0, [pc, #240]	; (8000460 <main+0x314>)
 800036e:	f001 f92f 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000372:	4603      	mov	r3, r0
 8000374:	461a      	mov	r2, r3
 8000376:	4b3d      	ldr	r3, [pc, #244]	; (800046c <main+0x320>)
 8000378:	601a      	str	r2, [r3, #0]
				}
				break;
 800037a:	e001      	b.n	8000380 <main+0x234>
				break;
 800037c:	bf00      	nop
 800037e:	e000      	b.n	8000382 <main+0x236>
				break;
 8000380:	bf00      	nop
			};

			// controle do estado do LED D3
			switch (sttD3) {
 8000382:	4b3b      	ldr	r3, [pc, #236]	; (8000470 <main+0x324>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b02      	cmp	r3, #2
 8000388:	d03a      	beq.n	8000400 <main+0x2b4>
 800038a:	2b02      	cmp	r3, #2
 800038c:	dc75      	bgt.n	800047a <main+0x32e>
 800038e:	2b00      	cmp	r3, #0
 8000390:	d002      	beq.n	8000398 <main+0x24c>
 8000392:	2b01      	cmp	r3, #1
 8000394:	d016      	beq.n	80003c4 <main+0x278>
 8000396:	e070      	b.n	800047a <main+0x32e>
			case INI_D3:                 // vai iniciar a máquina de estado
				tin_D3 = HAL_GetTick();    // tempo inicial que iniciou a tarefa
 8000398:	f000 fe50 	bl	800103c <HAL_GetTick>
 800039c:	6578      	str	r0, [r7, #84]	; 0x54
				sttD3 = LIG_D3;            // prox estado da máquina
 800039e:	4b34      	ldr	r3, [pc, #208]	; (8000470 <main+0x324>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // desl o LED
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003aa:	482d      	ldr	r0, [pc, #180]	; (8000460 <main+0x314>)
 80003ac:	f001 f927 	bl	80015fe <HAL_GPIO_WritePin>
				mn_led3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80003b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b4:	482a      	ldr	r0, [pc, #168]	; (8000460 <main+0x314>)
 80003b6:	f001 f90b 	bl	80015d0 <HAL_GPIO_ReadPin>
 80003ba:	4603      	mov	r3, r0
 80003bc:	461a      	mov	r2, r3
 80003be:	4b2d      	ldr	r3, [pc, #180]	; (8000474 <main+0x328>)
 80003c0:	601a      	str	r2, [r3, #0]
				break;
 80003c2:	e05a      	b.n	800047a <main+0x32e>
			case LIG_D3:                 // estado para ligar o LED
				if ((HAL_GetTick() - tin_D3) > DT_D3) // se HAL_GetTick()-tin_D1 > DT_D1
 80003c4:	f000 fe3a 	bl	800103c <HAL_GetTick>
 80003c8:	4602      	mov	r2, r0
 80003ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80003cc:	1ad3      	subs	r3, r2, r3
 80003ce:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80003d2:	d933      	bls.n	800043c <main+0x2f0>
				{
					tin_D3 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 80003d4:	f000 fe32 	bl	800103c <HAL_GetTick>
 80003d8:	6578      	str	r0, [r7, #84]	; 0x54
					sttD3 = DSLG_D3;         // muda o prox estado da máquina
 80003da:	4b25      	ldr	r3, [pc, #148]	; (8000470 <main+0x324>)
 80003dc:	2202      	movs	r2, #2
 80003de:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // ligaLED
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e6:	481e      	ldr	r0, [pc, #120]	; (8000460 <main+0x314>)
 80003e8:	f001 f909 	bl	80015fe <HAL_GPIO_WritePin>
					mn_led3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80003ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f0:	481b      	ldr	r0, [pc, #108]	; (8000460 <main+0x314>)
 80003f2:	f001 f8ed 	bl	80015d0 <HAL_GPIO_ReadPin>
 80003f6:	4603      	mov	r3, r0
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <main+0x328>)
 80003fc:	601a      	str	r2, [r3, #0]
				}
				break;
 80003fe:	e01d      	b.n	800043c <main+0x2f0>
			case DSLG_D3:                // estado para desligar o LED
				if ((HAL_GetTick() - tin_D3) > DT_D3) // se HAL_GetTick()-tin_D1 > DT_D1
 8000400:	f000 fe1c 	bl	800103c <HAL_GetTick>
 8000404:	4602      	mov	r2, r0
 8000406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800040e:	d933      	bls.n	8000478 <main+0x32c>
				{
					tin_D3 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 8000410:	f000 fe14 	bl	800103c <HAL_GetTick>
 8000414:	6578      	str	r0, [r7, #84]	; 0x54
					sttD3 = LIG_D3;          // muda o prox estado da máquina
 8000416:	4b16      	ldr	r3, [pc, #88]	; (8000470 <main+0x324>)
 8000418:	2201      	movs	r2, #1
 800041a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // desl LED
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000422:	480f      	ldr	r0, [pc, #60]	; (8000460 <main+0x314>)
 8000424:	f001 f8eb 	bl	80015fe <HAL_GPIO_WritePin>
					mn_led3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8000428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <main+0x314>)
 800042e:	f001 f8cf 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000432:	4603      	mov	r3, r0
 8000434:	461a      	mov	r2, r3
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <main+0x328>)
 8000438:	601a      	str	r2, [r3, #0]
				}
				break;
 800043a:	e01d      	b.n	8000478 <main+0x32c>
				break;
 800043c:	bf00      	nop
 800043e:	e01c      	b.n	800047a <main+0x32e>
 8000440:	40011000 	.word	0x40011000
 8000444:	20000038 	.word	0x20000038
 8000448:	20000068 	.word	0x20000068
 800044c:	40000800 	.word	0x40000800
 8000450:	06000001 	.word	0x06000001
 8000454:	06000002 	.word	0x06000002
 8000458:	06000003 	.word	0x06000003
 800045c:	20000048 	.word	0x20000048
 8000460:	40010c00 	.word	0x40010c00
 8000464:	20000028 	.word	0x20000028
 8000468:	20000049 	.word	0x20000049
 800046c:	2000002c 	.word	0x2000002c
 8000470:	2000004a 	.word	0x2000004a
 8000474:	20000030 	.word	0x20000030
				break;
 8000478:	bf00      	nop
			};

			// controle do estado do LED D4
			switch (sttD4) {
 800047a:	4bc2      	ldr	r3, [pc, #776]	; (8000784 <main+0x638>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d03c      	beq.n	80004fc <main+0x3b0>
 8000482:	2b02      	cmp	r3, #2
 8000484:	f300 8147 	bgt.w	8000716 <main+0x5ca>
 8000488:	2b00      	cmp	r3, #0
 800048a:	d002      	beq.n	8000492 <main+0x346>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d016      	beq.n	80004be <main+0x372>
 8000490:	e141      	b.n	8000716 <main+0x5ca>
			case INI_D4:                 // vai iniciar a máquina de estado
				tin_D4 = HAL_GetTick();    // tempo inicial que iniciou a tarefa
 8000492:	f000 fdd3 	bl	800103c <HAL_GetTick>
 8000496:	6538      	str	r0, [r7, #80]	; 0x50
				sttD4 = LIG_D4;            // prox estado da máquina
 8000498:	4bba      	ldr	r3, [pc, #744]	; (8000784 <main+0x638>)
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // desl o LED
 800049e:	2201      	movs	r2, #1
 80004a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a4:	48b8      	ldr	r0, [pc, #736]	; (8000788 <main+0x63c>)
 80004a6:	f001 f8aa 	bl	80015fe <HAL_GPIO_WritePin>
				mn_led4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80004aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ae:	48b6      	ldr	r0, [pc, #728]	; (8000788 <main+0x63c>)
 80004b0:	f001 f88e 	bl	80015d0 <HAL_GPIO_ReadPin>
 80004b4:	4603      	mov	r3, r0
 80004b6:	461a      	mov	r2, r3
 80004b8:	4bb4      	ldr	r3, [pc, #720]	; (800078c <main+0x640>)
 80004ba:	601a      	str	r2, [r3, #0]
				break;
 80004bc:	e12b      	b.n	8000716 <main+0x5ca>
			case LIG_D4:                 // estado para ligar o LED
				if ((HAL_GetTick() - tin_D4) > DT_D4) // se HAL_GetTick()-tin_D1 > DT_D1
 80004be:	f000 fdbd 	bl	800103c <HAL_GetTick>
 80004c2:	4602      	mov	r2, r0
 80004c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004c6:	1ad3      	subs	r3, r2, r3
 80004c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80004cc:	f240 811c 	bls.w	8000708 <main+0x5bc>
				{
					tin_D4 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 80004d0:	f000 fdb4 	bl	800103c <HAL_GetTick>
 80004d4:	6538      	str	r0, [r7, #80]	; 0x50
					sttD4 = DSLG_D4;         // muda o prox estado da máquina
 80004d6:	4bab      	ldr	r3, [pc, #684]	; (8000784 <main+0x638>)
 80004d8:	2202      	movs	r2, #2
 80004da:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // ligaLED
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e2:	48a9      	ldr	r0, [pc, #676]	; (8000788 <main+0x63c>)
 80004e4:	f001 f88b 	bl	80015fe <HAL_GPIO_WritePin>
					mn_led4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80004e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ec:	48a6      	ldr	r0, [pc, #664]	; (8000788 <main+0x63c>)
 80004ee:	f001 f86f 	bl	80015d0 <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	4ba5      	ldr	r3, [pc, #660]	; (800078c <main+0x640>)
 80004f8:	601a      	str	r2, [r3, #0]
				}
				break;
 80004fa:	e105      	b.n	8000708 <main+0x5bc>
			case DSLG_D4:                // estado para desligar o LED
				if ((HAL_GetTick() - tin_D4) > DT_D4) // se HAL_GetTick()-tin_D1 > DT_D1
 80004fc:	f000 fd9e 	bl	800103c <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800050a:	f240 80ff 	bls.w	800070c <main+0x5c0>
				{
					tin_D4 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 800050e:	f000 fd95 	bl	800103c <HAL_GetTick>
 8000512:	6538      	str	r0, [r7, #80]	; 0x50
					sttD4 = LIG_D4;          // muda o prox estado da máquina
 8000514:	4b9b      	ldr	r3, [pc, #620]	; (8000784 <main+0x638>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // desl LED
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000520:	4899      	ldr	r0, [pc, #612]	; (8000788 <main+0x63c>)
 8000522:	f001 f86c 	bl	80015fe <HAL_GPIO_WritePin>
					mn_led4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8000526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052a:	4897      	ldr	r0, [pc, #604]	; (8000788 <main+0x63c>)
 800052c:	f001 f850 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b95      	ldr	r3, [pc, #596]	; (800078c <main+0x640>)
 8000536:	601a      	str	r2, [r3, #0]
				}
				break;
 8000538:	e0e8      	b.n	800070c <main+0x5c0>

		} else {
			// Caso pisca todos juntos:
			// Todos os LEDs piscando em sincronia com período = DT_ALL
			// OBS: Usando o tin_D4 por conveniência apenas, mas poderia ser tin_ALL
			switch (sttALL) {
 800053a:	4b95      	ldr	r3, [pc, #596]	; (8000790 <main+0x644>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b02      	cmp	r3, #2
 8000540:	f000 8097 	beq.w	8000672 <main+0x526>
 8000544:	2b02      	cmp	r3, #2
 8000546:	f300 80e6 	bgt.w	8000716 <main+0x5ca>
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <main+0x408>
 800054e:	2b01      	cmp	r3, #1
 8000550:	d043      	beq.n	80005da <main+0x48e>
 8000552:	e0e0      	b.n	8000716 <main+0x5ca>
			case INI_ALL:                 // vai iniciar a máquina de estado
				tin_D4 = HAL_GetTick();    // tempo inicial que iniciou a tarefa
 8000554:	f000 fd72 	bl	800103c <HAL_GetTick>
 8000558:	6538      	str	r0, [r7, #80]	; 0x50
				sttALL = LIG_ALL;            // prox estado da máquina
 800055a:	4b8d      	ldr	r3, [pc, #564]	; (8000790 <main+0x644>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // desl o LED1
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000566:	4888      	ldr	r0, [pc, #544]	; (8000788 <main+0x63c>)
 8000568:	f001 f849 	bl	80015fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // desl o LED2
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000572:	4885      	ldr	r0, [pc, #532]	; (8000788 <main+0x63c>)
 8000574:	f001 f843 	bl	80015fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // desl o LED3
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057e:	4882      	ldr	r0, [pc, #520]	; (8000788 <main+0x63c>)
 8000580:	f001 f83d 	bl	80015fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // desl o LED4
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058a:	487f      	ldr	r0, [pc, #508]	; (8000788 <main+0x63c>)
 800058c:	f001 f837 	bl	80015fe <HAL_GPIO_WritePin>

				mn_led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); //  le estado LED1
 8000590:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000594:	487c      	ldr	r0, [pc, #496]	; (8000788 <main+0x63c>)
 8000596:	f001 f81b 	bl	80015d0 <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b7d      	ldr	r3, [pc, #500]	; (8000794 <main+0x648>)
 80005a0:	601a      	str	r2, [r3, #0]
				mn_led2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); //  le estado LED2
 80005a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a6:	4878      	ldr	r0, [pc, #480]	; (8000788 <main+0x63c>)
 80005a8:	f001 f812 	bl	80015d0 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	4b79      	ldr	r3, [pc, #484]	; (8000798 <main+0x64c>)
 80005b2:	601a      	str	r2, [r3, #0]
				mn_led3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); //  le estado LED3
 80005b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b8:	4873      	ldr	r0, [pc, #460]	; (8000788 <main+0x63c>)
 80005ba:	f001 f809 	bl	80015d0 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b76      	ldr	r3, [pc, #472]	; (800079c <main+0x650>)
 80005c4:	601a      	str	r2, [r3, #0]
				mn_led4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); //  le estado LED4
 80005c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ca:	486f      	ldr	r0, [pc, #444]	; (8000788 <main+0x63c>)
 80005cc:	f001 f800 	bl	80015d0 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b6d      	ldr	r3, [pc, #436]	; (800078c <main+0x640>)
 80005d6:	601a      	str	r2, [r3, #0]
				break;
 80005d8:	e09d      	b.n	8000716 <main+0x5ca>
			case LIG_ALL:                 // estado para ligar os LEDs
				if ((HAL_GetTick() - tin_D4) > DT_ALL) // se HAL_GetTick()-tin_D4 > DT_ALL
 80005da:	f000 fd2f 	bl	800103c <HAL_GetTick>
 80005de:	4602      	mov	r2, r0
 80005e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005e8:	f240 8092 	bls.w	8000710 <main+0x5c4>
				{
					tin_D4 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 80005ec:	f000 fd26 	bl	800103c <HAL_GetTick>
 80005f0:	6538      	str	r0, [r7, #80]	; 0x50
					sttALL = DSLG_ALL;         // muda o prox estado da máquina
 80005f2:	4b67      	ldr	r3, [pc, #412]	; (8000790 <main+0x644>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // lig o LED1
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fe:	4862      	ldr	r0, [pc, #392]	; (8000788 <main+0x63c>)
 8000600:	f000 fffd 	bl	80015fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // lig o LED2
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060a:	485f      	ldr	r0, [pc, #380]	; (8000788 <main+0x63c>)
 800060c:	f000 fff7 	bl	80015fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // lig o LED3
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000616:	485c      	ldr	r0, [pc, #368]	; (8000788 <main+0x63c>)
 8000618:	f000 fff1 	bl	80015fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // lig o LED4
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000622:	4859      	ldr	r0, [pc, #356]	; (8000788 <main+0x63c>)
 8000624:	f000 ffeb 	bl	80015fe <HAL_GPIO_WritePin>

					mn_led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); //  le estado LED1
 8000628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062c:	4856      	ldr	r0, [pc, #344]	; (8000788 <main+0x63c>)
 800062e:	f000 ffcf 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	4b57      	ldr	r3, [pc, #348]	; (8000794 <main+0x648>)
 8000638:	601a      	str	r2, [r3, #0]
					mn_led2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); //  le estado LED2
 800063a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063e:	4852      	ldr	r0, [pc, #328]	; (8000788 <main+0x63c>)
 8000640:	f000 ffc6 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	4b53      	ldr	r3, [pc, #332]	; (8000798 <main+0x64c>)
 800064a:	601a      	str	r2, [r3, #0]
					mn_led3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); //  le estado LED3
 800064c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000650:	484d      	ldr	r0, [pc, #308]	; (8000788 <main+0x63c>)
 8000652:	f000 ffbd 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	4b50      	ldr	r3, [pc, #320]	; (800079c <main+0x650>)
 800065c:	601a      	str	r2, [r3, #0]
					mn_led4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); //  le estado LED4
 800065e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000662:	4849      	ldr	r0, [pc, #292]	; (8000788 <main+0x63c>)
 8000664:	f000 ffb4 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b47      	ldr	r3, [pc, #284]	; (800078c <main+0x640>)
 800066e:	601a      	str	r2, [r3, #0]
				}
				break;
 8000670:	e04e      	b.n	8000710 <main+0x5c4>
			case DSLG_ALL:                // estado para desligar os LEDs
				if ((HAL_GetTick() - tin_D4) > DT_ALL) // se HAL_GetTick()-tin_D4 > DT_ALL
 8000672:	f000 fce3 	bl	800103c <HAL_GetTick>
 8000676:	4602      	mov	r2, r0
 8000678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000680:	d948      	bls.n	8000714 <main+0x5c8>
				{
					tin_D4 = HAL_GetTick(); // guarda tempo p/ prox mudança estado
 8000682:	f000 fcdb 	bl	800103c <HAL_GetTick>
 8000686:	6538      	str	r0, [r7, #80]	; 0x50
					sttALL = LIG_ALL;          // muda o prox estado da máquina
 8000688:	4b41      	ldr	r3, [pc, #260]	; (8000790 <main+0x644>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // desl o LED1
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000694:	483c      	ldr	r0, [pc, #240]	; (8000788 <main+0x63c>)
 8000696:	f000 ffb2 	bl	80015fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // desl o LED2
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a0:	4839      	ldr	r0, [pc, #228]	; (8000788 <main+0x63c>)
 80006a2:	f000 ffac 	bl	80015fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // desl o LED3
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	4836      	ldr	r0, [pc, #216]	; (8000788 <main+0x63c>)
 80006ae:	f000 ffa6 	bl	80015fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // desl o LED4
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b8:	4833      	ldr	r0, [pc, #204]	; (8000788 <main+0x63c>)
 80006ba:	f000 ffa0 	bl	80015fe <HAL_GPIO_WritePin>

					mn_led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); //  le estado LED1
 80006be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c2:	4831      	ldr	r0, [pc, #196]	; (8000788 <main+0x63c>)
 80006c4:	f000 ff84 	bl	80015d0 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b31      	ldr	r3, [pc, #196]	; (8000794 <main+0x648>)
 80006ce:	601a      	str	r2, [r3, #0]
					mn_led2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); //  le estado LED2
 80006d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d4:	482c      	ldr	r0, [pc, #176]	; (8000788 <main+0x63c>)
 80006d6:	f000 ff7b 	bl	80015d0 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <main+0x64c>)
 80006e0:	601a      	str	r2, [r3, #0]
					mn_led3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); //  le estado LED3
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4828      	ldr	r0, [pc, #160]	; (8000788 <main+0x63c>)
 80006e8:	f000 ff72 	bl	80015d0 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <main+0x650>)
 80006f2:	601a      	str	r2, [r3, #0]
					mn_led4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); //  le estado LED4
 80006f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f8:	4823      	ldr	r0, [pc, #140]	; (8000788 <main+0x63c>)
 80006fa:	f000 ff69 	bl	80015d0 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <main+0x640>)
 8000704:	601a      	str	r2, [r3, #0]
				}
				break;
 8000706:	e005      	b.n	8000714 <main+0x5c8>
				break;
 8000708:	bf00      	nop
 800070a:	e004      	b.n	8000716 <main+0x5ca>
				break;
 800070c:	bf00      	nop
 800070e:	e002      	b.n	8000716 <main+0x5ca>
				break;
 8000710:	bf00      	nop
 8000712:	e000      	b.n	8000716 <main+0x5ca>
				break;
 8000714:	bf00      	nop

		}

// 		Interrupção gerada por software: lpa1

		switch (sttPA1) {
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <main+0x654>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d046      	beq.n	80007ac <main+0x660>
 800071e:	2b02      	cmp	r3, #2
 8000720:	dc5c      	bgt.n	80007dc <main+0x690>
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <main+0x5e0>
 8000726:	2b01      	cmp	r3, #1
 8000728:	d004      	beq.n	8000734 <main+0x5e8>
 800072a:	e057      	b.n	80007dc <main+0x690>
		case INI_PA1:                    // vai iniciar a máquina de estado
			sttPA1 = LIG_PA1;              // prox estado da máquina
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <main+0x654>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
			break;
 8000732:	e053      	b.n	80007dc <main+0x690>
		case LIG_PA1:                    // estado p/ gerar INT_EXT_1
			if ((HAL_GetTick() - tin_PA1) > dt_PA1) // se HAL_GetTick()-tin_PA1 > dt_PA1
 8000734:	f000 fc82 	bl	800103c <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000740:	429a      	cmp	r2, r3
 8000742:	d248      	bcs.n	80007d6 <main+0x68a>
			{
				tin_PA1 = HAL_GetTick();  // guarda tempo p/ prox mudança estado
 8000744:	f000 fc7a 	bl	800103c <HAL_GetTick>
 8000748:	6478      	str	r0, [r7, #68]	; 0x44
				if (lpa1 == 1) {
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <main+0x658>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d141      	bne.n	80007d6 <main+0x68a>
					sttPA1 = DSLG_PA1;          // muda o prox estado da máquina
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <main+0x654>)
 8000754:	2202      	movs	r2, #2
 8000756:	701a      	strb	r2, [r3, #0]
					HAL_EXTI_ClearPending(&hexti_1, EXTI_TRIGGER_FALLING);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2102      	movs	r1, #2
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fd84 	bl	800126c <HAL_EXTI_ClearPending>
					HAL_EXTI_GenerateSWI(&hexti_1); // pedido de int por software
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fd97 	bl	800129c <HAL_EXTI_GenerateSWI>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // ligar led
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <main+0x65c>)
 8000776:	f000 ff42 	bl	80015fe <HAL_GPIO_WritePin>
					lpa1 = 0;                    // volta lpa1 para desativada
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <main+0x658>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 8000780:	e029      	b.n	80007d6 <main+0x68a>
 8000782:	bf00      	nop
 8000784:	2000004b 	.word	0x2000004b
 8000788:	40010c00 	.word	0x40010c00
 800078c:	20000034 	.word	0x20000034
 8000790:	2000004c 	.word	0x2000004c
 8000794:	20000028 	.word	0x20000028
 8000798:	2000002c 	.word	0x2000002c
 800079c:	20000030 	.word	0x20000030
 80007a0:	2000004d 	.word	0x2000004d
 80007a4:	2000003c 	.word	0x2000003c
 80007a8:	40011000 	.word	0x40011000
		case DSLG_PA1:                   // estado para desligar o LED
			if ((HAL_GetTick() - tin_PA1) > dt_PA1) // se HAL_GetTick()-tin_PA1 > dt_PA1
 80007ac:	f000 fc46 	bl	800103c <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d20e      	bcs.n	80007da <main+0x68e>
					{
				tin_PA1 = HAL_GetTick();  // guarda tempo p/ prox mudança estado
 80007bc:	f000 fc3e 	bl	800103c <HAL_GetTick>
 80007c0:	6478      	str	r0, [r7, #68]	; 0x44
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // ligar led
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c8:	489a      	ldr	r0, [pc, #616]	; (8000a34 <main+0x8e8>)
 80007ca:	f000 ff18 	bl	80015fe <HAL_GPIO_WritePin>
				sttPA1 = LIG_PA1;            // muda o prox estado da máquina
 80007ce:	4b9a      	ldr	r3, [pc, #616]	; (8000a38 <main+0x8ec>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80007d4:	e001      	b.n	80007da <main+0x68e>
			break;
 80007d6:	bf00      	nop
 80007d8:	e000      	b.n	80007dc <main+0x690>
			break;
 80007da:	bf00      	nop
		};

// 		Interrupçao gerada por software :lpa2
		switch (sttPA2) {
 80007dc:	4b97      	ldr	r3, [pc, #604]	; (8000a3c <main+0x8f0>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d031      	beq.n	8000848 <main+0x6fc>
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	dc47      	bgt.n	8000878 <main+0x72c>
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <main+0x6a6>
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d004      	beq.n	80007fa <main+0x6ae>
 80007f0:	e042      	b.n	8000878 <main+0x72c>
		case INI_PA2:                    // vai iniciar a máquina de estado
			sttPA2 = LIG_PA2;              // prox estado da máquina
 80007f2:	4b92      	ldr	r3, [pc, #584]	; (8000a3c <main+0x8f0>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
			break;
 80007f8:	e03e      	b.n	8000878 <main+0x72c>
		case LIG_PA2:                    // estado p/ gerar INT_EXT_1
			if ((HAL_GetTick() - tin_PA2) > dt_PA2) // atraso para resposta do sinal
 80007fa:	f000 fc1f 	bl	800103c <HAL_GetTick>
 80007fe:	4602      	mov	r2, r0
 8000800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000806:	429a      	cmp	r2, r3
 8000808:	d233      	bcs.n	8000872 <main+0x726>
					{
				tin_PA2 = HAL_GetTick(); // incrementa contador de atraso de resposta
 800080a:	f000 fc17 	bl	800103c <HAL_GetTick>
 800080e:	6438      	str	r0, [r7, #64]	; 0x40
				if (lpa2 == 1) {
 8000810:	4b8b      	ldr	r3, [pc, #556]	; (8000a40 <main+0x8f4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d12c      	bne.n	8000872 <main+0x726>
					sttPA2 = DSLG_PA2;          // muda o prox estado da máquina
 8000818:	4b88      	ldr	r3, [pc, #544]	; (8000a3c <main+0x8f0>)
 800081a:	2202      	movs	r2, #2
 800081c:	701a      	strb	r2, [r3, #0]
					HAL_EXTI_ClearPending(&hexti_2, EXTI_TRIGGER_FALLING);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2102      	movs	r1, #2
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fd21 	bl	800126c <HAL_EXTI_ClearPending>
					HAL_EXTI_GenerateSWI(&hexti_2); // pedido de int por software
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fd34 	bl	800129c <HAL_EXTI_GenerateSWI>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // ligar led
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083a:	487e      	ldr	r0, [pc, #504]	; (8000a34 <main+0x8e8>)
 800083c:	f000 fedf 	bl	80015fe <HAL_GPIO_WritePin>
					lpa2 = 0;                    // volta lpa2 para desativada
 8000840:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <main+0x8f4>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 8000846:	e014      	b.n	8000872 <main+0x726>
		case DSLG_PA2:                   // estado para desligar o LED
			if ((HAL_GetTick() - tin_PA2) > dt_PA2) // se HAL_GetTick()-tin_PA1 > dt_PA1
 8000848:	f000 fbf8 	bl	800103c <HAL_GetTick>
 800084c:	4602      	mov	r2, r0
 800084e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000854:	429a      	cmp	r2, r3
 8000856:	d20e      	bcs.n	8000876 <main+0x72a>
			{
				tin_PA2 = HAL_GetTick();  // guarda tempo p/ prox mudança estado
 8000858:	f000 fbf0 	bl	800103c <HAL_GetTick>
 800085c:	6438      	str	r0, [r7, #64]	; 0x40
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); // ligar led
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000864:	4873      	ldr	r0, [pc, #460]	; (8000a34 <main+0x8e8>)
 8000866:	f000 feca 	bl	80015fe <HAL_GPIO_WritePin>
				sttPA2 = LIG_PA2;            // muda o prox estado da máquina
 800086a:	4b74      	ldr	r3, [pc, #464]	; (8000a3c <main+0x8f0>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000870:	e001      	b.n	8000876 <main+0x72a>
			break;
 8000872:	bf00      	nop
 8000874:	e000      	b.n	8000878 <main+0x72c>
			break;
 8000876:	bf00      	nop
		};

		// 		Interrupçao gerada por software :lpa3
				switch (sttPA3) {
 8000878:	4b72      	ldr	r3, [pc, #456]	; (8000a44 <main+0x8f8>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d02f      	beq.n	80008e0 <main+0x794>
 8000880:	2b02      	cmp	r3, #2
 8000882:	dc45      	bgt.n	8000910 <main+0x7c4>
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <main+0x742>
 8000888:	2b01      	cmp	r3, #1
 800088a:	d004      	beq.n	8000896 <main+0x74a>
 800088c:	e040      	b.n	8000910 <main+0x7c4>
				case INI_PA3:                    // vai iniciar a máquina de estado
					sttPA3 = LIG_PA3;              // prox estado da máquina
 800088e:	4b6d      	ldr	r3, [pc, #436]	; (8000a44 <main+0x8f8>)
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
					break;
 8000894:	e03c      	b.n	8000910 <main+0x7c4>
				case LIG_PA3:                    // estado p/ gerar INT_EXT_3
					if ((HAL_GetTick() - tin_PA3) > dt_PA3) // atraso para resposta do sinal
 8000896:	f000 fbd1 	bl	800103c <HAL_GetTick>
 800089a:	4602      	mov	r2, r0
 800089c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d231      	bcs.n	800090a <main+0x7be>
							{
						tin_PA3 = HAL_GetTick(); // incrementa contador de atraso de resposta
 80008a6:	f000 fbc9 	bl	800103c <HAL_GetTick>
 80008aa:	63f8      	str	r0, [r7, #60]	; 0x3c
						if (lpa3 == 1) {
 80008ac:	4b66      	ldr	r3, [pc, #408]	; (8000a48 <main+0x8fc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d12a      	bne.n	800090a <main+0x7be>
							sttPA3 = DSLG_PA3;          // muda o prox estado da máquina
 80008b4:	4b63      	ldr	r3, [pc, #396]	; (8000a44 <main+0x8f8>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	701a      	strb	r2, [r3, #0]
							HAL_EXTI_ClearPending(&hexti_3, EXTI_TRIGGER_FALLING);
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2102      	movs	r1, #2
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fcd4 	bl	800126c <HAL_EXTI_ClearPending>
							HAL_EXTI_GenerateSWI(&hexti_3); // pedido de int por software
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fce8 	bl	800129c <HAL_EXTI_GenerateSWI>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // ligar led
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d2:	4858      	ldr	r0, [pc, #352]	; (8000a34 <main+0x8e8>)
 80008d4:	f000 fe93 	bl	80015fe <HAL_GPIO_WritePin>
							lpa3 = 0;                    // volta lpa2 para desativada
 80008d8:	4b5b      	ldr	r3, [pc, #364]	; (8000a48 <main+0x8fc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
						}
					}
					break;
 80008de:	e014      	b.n	800090a <main+0x7be>
				case DSLG_PA3:                   // estado para desligar o LED
					if ((HAL_GetTick() - tin_PA3) > dt_PA3) // se HAL_GetTick()-tin_PA1 > dt_PA3
 80008e0:	f000 fbac 	bl	800103c <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d20e      	bcs.n	800090e <main+0x7c2>
					{
						tin_PA3 = HAL_GetTick();  // guarda tempo p/ prox mudança estado
 80008f0:	f000 fba4 	bl	800103c <HAL_GetTick>
 80008f4:	63f8      	str	r0, [r7, #60]	; 0x3c
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // ligar led
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fc:	484d      	ldr	r0, [pc, #308]	; (8000a34 <main+0x8e8>)
 80008fe:	f000 fe7e 	bl	80015fe <HAL_GPIO_WritePin>
						sttPA3 = LIG_PA3;            // muda o prox estado da máquina
 8000902:	4b50      	ldr	r3, [pc, #320]	; (8000a44 <main+0x8f8>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
					}
					break;
 8000908:	e001      	b.n	800090e <main+0x7c2>
					break;
 800090a:	bf00      	nop
 800090c:	e000      	b.n	8000910 <main+0x7c4>
					break;
 800090e:	bf00      	nop
		// CONTROLE DO CRONOMETRO
		// Maquina de estados do cronometro -
		// Estado INI : Zera o cronometro e mantém o track do GetTick
		// Estado INC : Incrementa "diferenciais" de tempo no cronometro (em ms)
		// Estado PAUSE: Mantem o track do GetTick, mas para de incrementar
		switch (sttCRON) {
 8000910:	4b4e      	ldr	r3, [pc, #312]	; (8000a4c <main+0x900>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d01b      	beq.n	8000950 <main+0x804>
 8000918:	2b02      	cmp	r3, #2
 800091a:	dc1d      	bgt.n	8000958 <main+0x80c>
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <main+0x7da>
 8000920:	2b01      	cmp	r3, #1
 8000922:	d007      	beq.n	8000934 <main+0x7e8>
 8000924:	e018      	b.n	8000958 <main+0x80c>
		case INI_CRON:					// estado que vai limpar o cronometro
			mn_tin_CRON = 0;
 8000926:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <main+0x904>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
			tin_CRON = HAL_GetTick();    // tempo em que iniciou a tarefa
 800092c:	f000 fb86 	bl	800103c <HAL_GetTick>
 8000930:	64b8      	str	r0, [r7, #72]	; 0x48
			break;
 8000932:	e011      	b.n	8000958 <main+0x80c>
		case INC_CRON:            // estado para incrementar tempo do cronometro
			// Calcula o diferencial de tempo da ultima entrada e incrementa no cronometro
			mn_tin_CRON = mn_tin_CRON + (HAL_GetTick() - tin_CRON); // Vai somando infinitamente em (ms)
 8000934:	f000 fb82 	bl	800103c <HAL_GetTick>
 8000938:	4602      	mov	r2, r0
 800093a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800093c:	1ad2      	subs	r2, r2, r3
 800093e:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <main+0x904>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a42      	ldr	r2, [pc, #264]	; (8000a50 <main+0x904>)
 8000946:	6013      	str	r3, [r2, #0]
			tin_CRON = HAL_GetTick();    // tempo em que iniciou a tarefa
 8000948:	f000 fb78 	bl	800103c <HAL_GetTick>
 800094c:	64b8      	str	r0, [r7, #72]	; 0x48
			break;
 800094e:	e003      	b.n	8000958 <main+0x80c>
		case PAUSE_CRON:
			tin_CRON = HAL_GetTick();    // Manter track do HAL_GetTick
 8000950:	f000 fb74 	bl	800103c <HAL_GetTick>
 8000954:	64b8      	str	r0, [r7, #72]	; 0x48
			break;
 8000956:	bf00      	nop
		};

		// Definição dos estados da Maq Cronometro
		clear_signal = get_cron_clear_status();
 8000958:	f000 faca 	bl	8000ef0 <get_cron_clear_status>
 800095c:	61f8      	str	r0, [r7, #28]
		start_status = get_cron_start_status();
 800095e:	f000 fab1 	bl	8000ec4 <get_cron_start_status>
 8000962:	6238      	str	r0, [r7, #32]
		if (start_status == 0) {
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10c      	bne.n	8000984 <main+0x838>
			if (clear_signal == 1) {
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d105      	bne.n	800097c <main+0x830>
				sttCRON = INI_CRON; // Volta para o INI_CRON, que limpa o contador do cronometro
 8000970:	4b36      	ldr	r3, [pc, #216]	; (8000a4c <main+0x900>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
//				clear_signal = 0;
				reset_cron_clear_status();
 8000976:	f000 fad1 	bl	8000f1c <reset_cron_clear_status>
 800097a:	e006      	b.n	800098a <main+0x83e>
			} else {
				sttCRON = PAUSE_CRON;
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <main+0x900>)
 800097e:	2202      	movs	r2, #2
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	e002      	b.n	800098a <main+0x83e>
			}
		} else {
			sttCRON = INC_CRON;
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <main+0x900>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
		}

		//
		// Máquina de Estados para Controle do Gauge de PWM
		switch (sttGAUGE) {
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <main+0x908>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d02f      	beq.n	80009f2 <main+0x8a6>
 8000992:	2b02      	cmp	r3, #2
 8000994:	f73f ac30 	bgt.w	80001f8 <main+0xac>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <main+0x856>
 800099c:	2b01      	cmp	r3, #1
 800099e:	d00d      	beq.n	80009bc <main+0x870>
 80009a0:	e046      	b.n	8000a30 <main+0x8e4>
		case INI_PWM:                 // vai iniciar a máquina de estado
			tin_PWM = HAL_GetTick();    // tempo em que iniciou a tarefa
 80009a2:	f000 fb4b 	bl	800103c <HAL_GetTick>
 80009a6:	64f8      	str	r0, [r7, #76]	; 0x4c
			sttGAUGE = INC_PWM;            // prox estado da máquina
 80009a8:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <main+0x908>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
			TIM4->CCR2 = 0;            // inicia val dc_PWM= 0
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <main+0x90c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	639a      	str	r2, [r3, #56]	; 0x38
			mn_dt_PWM = dc_PWM;
 80009b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80009b6:	4a29      	ldr	r2, [pc, #164]	; (8000a5c <main+0x910>)
 80009b8:	6013      	str	r3, [r2, #0]
			break;
 80009ba:	e039      	b.n	8000a30 <main+0x8e4>
		case INC_PWM:                 // estado para incrementar PWM
			if ((HAL_GetTick() - tin_PWM) > dt_PWM) // se o milis-tin_PWM > dt_PWM
 80009bc:	f000 fb3e 	bl	800103c <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009c4:	1ad2      	subs	r2, r2, r3
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d92d      	bls.n	8000a28 <main+0x8dc>
			{
				tin_PWM = HAL_GetTick();  // tempo p/ prox mudança dc_PWM
 80009cc:	f000 fb36 	bl	800103c <HAL_GetTick>
 80009d0:	64f8      	str	r0, [r7, #76]	; 0x4c
				++dc_PWM;                // incrementa dc_PWM
 80009d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80009d4:	3301      	adds	r3, #1
 80009d6:	877b      	strh	r3, [r7, #58]	; 0x3a
				if (dc_PWM >= PWM_ARR)
 80009d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80009da:	2bc7      	cmp	r3, #199	; 0xc7
 80009dc:	d902      	bls.n	80009e4 <main+0x898>
					sttGAUGE = DEC_PWM;  // muda maq est p/ DEC_PWM
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <main+0x908>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	701a      	strb	r2, [r3, #0]
				TIM4->CCR2 = dc_PWM;      // set comparador com valor dc_PWM
 80009e4:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <main+0x90c>)
 80009e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80009e8:	6393      	str	r3, [r2, #56]	; 0x38
				mn_dt_PWM = dc_PWM;
 80009ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <main+0x910>)
 80009ee:	6013      	str	r3, [r2, #0]
			}
			break;
 80009f0:	e01a      	b.n	8000a28 <main+0x8dc>
		case DEC_PWM:                 // estado para decrementar o PWM
			if ((HAL_GetTick() - tin_PWM) > dt_PWM) // se o milis-tin_PWM > dt_PWM
 80009f2:	f000 fb23 	bl	800103c <HAL_GetTick>
 80009f6:	4602      	mov	r2, r0
 80009f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009fa:	1ad2      	subs	r2, r2, r3
 80009fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d915      	bls.n	8000a2e <main+0x8e2>
			{
				tin_PWM = HAL_GetTick();  // tempo p/ prox mudança dc_PWM
 8000a02:	f000 fb1b 	bl	800103c <HAL_GetTick>
 8000a06:	64f8      	str	r0, [r7, #76]	; 0x4c
				--dc_PWM;                // decrementa dc_PWM
 8000a08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	877b      	strh	r3, [r7, #58]	; 0x3a
				if (dc_PWM <= 0)
 8000a0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <main+0x8ce>
					sttGAUGE = INC_PWM;  // muda maq est p/ INC_PWM
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <main+0x908>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
				TIM4->CCR2 = dc_PWM;      // set comparador com valor dc_PWM
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <main+0x90c>)
 8000a1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000a1e:	6393      	str	r3, [r2, #56]	; 0x38
				mn_dt_PWM = dc_PWM;
 8000a20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <main+0x910>)
 8000a24:	6013      	str	r3, [r2, #0]
			}
			break;
 8000a26:	e002      	b.n	8000a2e <main+0x8e2>
			break;
 8000a28:	bf00      	nop
 8000a2a:	f7ff bbe5 	b.w	80001f8 <main+0xac>
			break;
 8000a2e:	bf00      	nop
		modo = get_modo_oper();
 8000a30:	f7ff bbe2 	b.w	80001f8 <main+0xac>
 8000a34:	40011000 	.word	0x40011000
 8000a38:	2000004d 	.word	0x2000004d
 8000a3c:	2000004e 	.word	0x2000004e
 8000a40:	20000040 	.word	0x20000040
 8000a44:	2000004f 	.word	0x2000004f
 8000a48:	20000044 	.word	0x20000044
 8000a4c:	20000050 	.word	0x20000050
 8000a50:	20000038 	.word	0x20000038
 8000a54:	20000051 	.word	0x20000051
 8000a58:	40000800 	.word	0x40000800
 8000a5c:	200000b0 	.word	0x200000b0

08000a60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	; 0x40
 8000a64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2228      	movs	r2, #40	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 ffda 	bl	8002a28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a9e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fde3 	bl	8001674 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x58>
		Error_Handler();
 8000ab4:	f000 f908 	bl	8000cc8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f84e 	bl	8001b74 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x82>
		Error_Handler();
 8000ade:	f000 f8f3 	bl	8000cc8 <Error_Handler>
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	3740      	adds	r7, #64	; 0x40
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
	/* EXTI1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2007      	movs	r0, #7
 8000af4:	f000 fb83 	bl	80011fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000af8:	2007      	movs	r0, #7
 8000afa:	f000 fb9c 	bl	8001236 <HAL_NVIC_EnableIRQ>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000b34:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000b36:	4a2d      	ldr	r2, [pc, #180]	; (8000bec <MX_TIM4_Init+0xe8>)
 8000b38:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8000b46:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000b5a:	4823      	ldr	r0, [pc, #140]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000b5c:	f001 f972 	bl	8001e44 <HAL_TIM_Base_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM4_Init+0x66>
		Error_Handler();
 8000b66:	f000 f8af 	bl	8000cc8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000b70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b74:	4619      	mov	r1, r3
 8000b76:	481c      	ldr	r0, [pc, #112]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000b78:	f001 fb6c 	bl	8002254 <HAL_TIM_ConfigClockSource>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM4_Init+0x82>
		Error_Handler();
 8000b82:	f000 f8a1 	bl	8000cc8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000b86:	4818      	ldr	r0, [pc, #96]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000b88:	f001 f9ab 	bl	8001ee2 <HAL_TIM_PWM_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM4_Init+0x92>
		Error_Handler();
 8000b92:	f000 f899 	bl	8000cc8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000b9e:	f107 0320 	add.w	r3, r7, #32
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4810      	ldr	r0, [pc, #64]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000ba6:	f001 febd 	bl	8002924 <HAL_TIMEx_MasterConfigSynchronization>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000bb0:	f000 f88a 	bl	8000cc8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb4:	2360      	movs	r3, #96	; 0x60
 8000bb6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000bcc:	f001 fa84 	bl	80020d8 <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000bd6:	f000 f877 	bl	8000cc8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000bda:	4803      	ldr	r0, [pc, #12]	; (8000be8 <MX_TIM4_Init+0xe4>)
 8000bdc:	f000 f8ca 	bl	8000d74 <HAL_TIM_MspPostInit>

}
 8000be0:	bf00      	nop
 8000be2:	3738      	adds	r7, #56	; 0x38
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000068 	.word	0x20000068
 8000bec:	40000800 	.word	0x40000800

08000bf0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <MX_GPIO_Init+0xc8>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a2b      	ldr	r2, [pc, #172]	; (8000cb8 <MX_GPIO_Init+0xc8>)
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <MX_GPIO_Init+0xc8>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0320 	and.w	r3, r3, #32
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <MX_GPIO_Init+0xc8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <MX_GPIO_Init+0xc8>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_GPIO_Init+0xc8>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_GPIO_Init+0xc8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <MX_GPIO_Init+0xc8>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_GPIO_Init+0xc8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c52:	481a      	ldr	r0, [pc, #104]	; (8000cbc <MX_GPIO_Init+0xcc>)
 8000c54:	f000 fcd3 	bl	80015fe <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PA1 PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 8000c58:	230e      	movs	r3, #14
 8000c5a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4816      	ldr	r0, [pc, #88]	; (8000cc4 <MX_GPIO_Init+0xd4>)
 8000c6c:	f000 fb2c 	bl	80012c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000c70:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c74:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_GPIO_Init+0xcc>)
 8000c8a:	f000 fb1d 	bl	80012c8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2008      	movs	r0, #8
 8000c94:	f000 fab3 	bl	80011fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c98:	2008      	movs	r0, #8
 8000c9a:	f000 facc 	bl	8001236 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2009      	movs	r0, #9
 8000ca4:	f000 faab 	bl	80011fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ca8:	2009      	movs	r0, #9
 8000caa:	f000 fac4 	bl	8001236 <HAL_NVIC_EnableIRQ>

}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	10210000 	.word	0x10210000
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_MspInit+0x5c>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <HAL_MspInit+0x5c>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_MspInit+0x5c>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_MspInit+0x5c>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_MspInit+0x5c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	61d3      	str	r3, [r2, #28]
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_MspInit+0x5c>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_MspInit+0x60>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_MspInit+0x60>)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000

08000d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_TIM_Base_MspInit+0x34>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d10b      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_TIM_Base_MspInit+0x38>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_TIM_Base_MspInit+0x38>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_TIM_Base_MspInit+0x38>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40000800 	.word	0x40000800
 8000d70:	40021000 	.word	0x40021000

08000d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <HAL_TIM_MspPostInit+0x58>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d117      	bne.n	8000dc4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_TIM_MspPostInit+0x5c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_TIM_MspPostInit+0x5c>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_TIM_MspPostInit+0x5c>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <HAL_TIM_MspPostInit+0x60>)
 8000dc0:	f000 fa82 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40000800 	.word	0x40000800
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 f8fb 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	  // se PA1=0 é porque o pino foi ativado para LOW
	  if (0==0)
	  {
	    ++ modo_oper;                             // incrementa modo operação
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <EXTI1_IRQHandler+0x28>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <EXTI1_IRQHandler+0x28>)
 8000e34:	6013      	str	r3, [r2, #0]
	    if (modo_oper>MAX_MODO_OPER) modo_oper=0; // se >MAX voltar modo_oper=0
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <EXTI1_IRQHandler+0x28>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d902      	bls.n	8000e44 <EXTI1_IRQHandler+0x1c>
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <EXTI1_IRQHandler+0x28>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
	  }
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f000 fbf3 	bl	8001630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  // Get modo oper

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200000b4 	.word	0x200000b4

08000e54 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
//	}
//	else{
//		start_status = STOPPED;
//		clear_status = 0;
//	}
    ++ start_status;                             // incrementa modo operação
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <EXTI2_IRQHandler+0x28>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <EXTI2_IRQHandler+0x28>)
 8000e60:	6013      	str	r3, [r2, #0]
    if (start_status >MAX_START_MACHINE) start_status = 0; // se >MAX voltar modo_oper=0
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <EXTI2_IRQHandler+0x28>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d902      	bls.n	8000e70 <EXTI2_IRQHandler+0x1c>
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <EXTI2_IRQHandler+0x28>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]

	/* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000e70:	2004      	movs	r0, #4
 8000e72:	f000 fbdd 	bl	8001630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000054 	.word	0x20000054

08000e80 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000e84:	2008      	movs	r0, #8
 8000e86:	f000 fbd3 	bl	8001630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  clear_status = 1;
 8000e8a:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <EXTI3_IRQHandler+0x14>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000058 	.word	0x20000058

08000e98 <get_modo_oper>:
/* USER CODE BEGIN 1 */
// fn que qpenas retorna o valor da var modo_oper
int get_modo_oper(void){
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  static int x;                        // var local recebe modo_oper
  // OBS: seção crítica, desabilitamos todas as IRQs p/ atualizar var
  __disable_irq();                     // desabilita IRQs
  x = modo_oper;                       // faz x = modo_oper
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <get_modo_oper+0x24>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <get_modo_oper+0x28>)
 8000ea8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000eaa:	b662      	cpsie	i
}
 8000eac:	bf00      	nop
  __enable_irq();                      // volta habilitar IRQs
  return x;                            // retorna x (=modo_oper)
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <get_modo_oper+0x28>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200000b4 	.word	0x200000b4
 8000ec0:	2000005c 	.word	0x2000005c

08000ec4 <get_cron_start_status>:
int get_cron_start_status(void){
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  static int y;                        // var local recebe modo_oper
  // OBS: seção crítica, desabilitamos todas as IRQs p/ atualizar var
  __disable_irq();                     // desabilita IRQs
  y = start_status;                       // faz x = modo_oper
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <get_cron_start_status+0x24>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <get_cron_start_status+0x28>)
 8000ed4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ed6:	b662      	cpsie	i
}
 8000ed8:	bf00      	nop
  __enable_irq();                      // volta habilitar IRQs
  return y;                            // retorna x (=modo_oper)
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <get_cron_start_status+0x28>)
 8000edc:	681b      	ldr	r3, [r3, #0]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000054 	.word	0x20000054
 8000eec:	20000060 	.word	0x20000060

08000ef0 <get_cron_clear_status>:
int get_cron_clear_status(void){
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  static int z;                        // var local recebe modo_oper
  // OBS: seção crítica, desabilitamos todas as IRQs p/ atualizar var
  __disable_irq();                     // desabilita IRQs
  z = clear_status;                       // faz x = modo_oper
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <get_cron_clear_status+0x24>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <get_cron_clear_status+0x28>)
 8000f00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f02:	b662      	cpsie	i
}
 8000f04:	bf00      	nop
  __enable_irq();                      // volta habilitar IRQs
  return z;                            // retorna x (=modo_oper)
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <get_cron_clear_status+0x28>)
 8000f08:	681b      	ldr	r3, [r3, #0]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000058 	.word	0x20000058
 8000f18:	20000064 	.word	0x20000064

08000f1c <reset_cron_clear_status>:
void reset_cron_clear_status(void){
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  clear_status = 0;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <reset_cron_clear_status+0x14>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000058 	.word	0x20000058

08000f34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	; (8000f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f66:	f7ff ffe5 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f001 fd39 	bl	80029e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6e:	f7ff f8ed 	bl	800014c <main>
  bx lr
 8000f72:	4770      	bx	lr
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f7c:	08002a78 	.word	0x08002a78
  ldr r2, =_sbss
 8000f80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f84:	200000bc 	.word	0x200000bc

08000f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_2_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_Init+0x28>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_Init+0x28>)
 8000f96:	f043 0310 	orr.w	r3, r3, #16
 8000f9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f923 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f000 f808 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff fe94 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40022000 	.word	0x40022000

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_InitTick+0x54>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x58>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f93b 	bl	8001252 <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f903 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	; (8001014 <HAL_InitTick+0x5c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	20000008 	.word	0x20000008
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x1c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_IncTick+0x20>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a03      	ldr	r2, [pc, #12]	; (8001038 <HAL_IncTick+0x20>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	20000008 	.word	0x20000008
 8001038:	200000b8 	.word	0x200000b8

0800103c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b02      	ldr	r3, [pc, #8]	; (800104c <HAL_GetTick+0x10>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	200000b8 	.word	0x200000b8

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4906      	ldr	r1, [pc, #24]	; (80010e8 <__NVIC_EnableIRQ+0x34>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff90 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff2d 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff42 	bl	8001098 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff90 	bl	8001140 <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5f 	bl	80010ec <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff35 	bl	80010b4 <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument compilation warning */
  UNUSED(Edge);

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 031f 	and.w	r3, r3, #31
 800127e:	2201      	movs	r2, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_EXTI_ClearPending+0x2c>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6153      	str	r3, [r2, #20]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2201      	movs	r2, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 80012b4:	4a03      	ldr	r2, [pc, #12]	; (80012c4 <HAL_EXTI_GenerateSWI+0x28>)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6113      	str	r3, [r2, #16]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	40010400 	.word	0x40010400

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b08b      	sub	sp, #44	; 0x2c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	e169      	b.n	80015b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012dc:	2201      	movs	r2, #1
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8158 	bne.w	80015aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4a9a      	ldr	r2, [pc, #616]	; (8001568 <HAL_GPIO_Init+0x2a0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d05e      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001304:	4a98      	ldr	r2, [pc, #608]	; (8001568 <HAL_GPIO_Init+0x2a0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d875      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800130a:	4a98      	ldr	r2, [pc, #608]	; (800156c <HAL_GPIO_Init+0x2a4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d058      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001310:	4a96      	ldr	r2, [pc, #600]	; (800156c <HAL_GPIO_Init+0x2a4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d86f      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001316:	4a96      	ldr	r2, [pc, #600]	; (8001570 <HAL_GPIO_Init+0x2a8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d052      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 800131c:	4a94      	ldr	r2, [pc, #592]	; (8001570 <HAL_GPIO_Init+0x2a8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d869      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001322:	4a94      	ldr	r2, [pc, #592]	; (8001574 <HAL_GPIO_Init+0x2ac>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d04c      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001328:	4a92      	ldr	r2, [pc, #584]	; (8001574 <HAL_GPIO_Init+0x2ac>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d863      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800132e:	4a92      	ldr	r2, [pc, #584]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d046      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001334:	4a90      	ldr	r2, [pc, #576]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d85d      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800133a:	2b12      	cmp	r3, #18
 800133c:	d82a      	bhi.n	8001394 <HAL_GPIO_Init+0xcc>
 800133e:	2b12      	cmp	r3, #18
 8001340:	d859      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <HAL_GPIO_Init+0x80>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	080013c3 	.word	0x080013c3
 800134c:	0800139d 	.word	0x0800139d
 8001350:	080013af 	.word	0x080013af
 8001354:	080013f1 	.word	0x080013f1
 8001358:	080013f7 	.word	0x080013f7
 800135c:	080013f7 	.word	0x080013f7
 8001360:	080013f7 	.word	0x080013f7
 8001364:	080013f7 	.word	0x080013f7
 8001368:	080013f7 	.word	0x080013f7
 800136c:	080013f7 	.word	0x080013f7
 8001370:	080013f7 	.word	0x080013f7
 8001374:	080013f7 	.word	0x080013f7
 8001378:	080013f7 	.word	0x080013f7
 800137c:	080013f7 	.word	0x080013f7
 8001380:	080013f7 	.word	0x080013f7
 8001384:	080013f7 	.word	0x080013f7
 8001388:	080013f7 	.word	0x080013f7
 800138c:	080013a5 	.word	0x080013a5
 8001390:	080013b9 	.word	0x080013b9
 8001394:	4a79      	ldr	r2, [pc, #484]	; (800157c <HAL_GPIO_Init+0x2b4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800139a:	e02c      	b.n	80013f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	623b      	str	r3, [r7, #32]
          break;
 80013a2:	e029      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	3304      	adds	r3, #4
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	e024      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	3308      	adds	r3, #8
 80013b4:	623b      	str	r3, [r7, #32]
          break;
 80013b6:	e01f      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	330c      	adds	r3, #12
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	e01a      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ca:	2304      	movs	r3, #4
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e013      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d8:	2308      	movs	r3, #8
 80013da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	611a      	str	r2, [r3, #16]
          break;
 80013e2:	e009      	b.n	80013f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	615a      	str	r2, [r3, #20]
          break;
 80013ee:	e003      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
          break;
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          break;
 80013f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d801      	bhi.n	8001402 <HAL_GPIO_Init+0x13a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	e001      	b.n	8001406 <HAL_GPIO_Init+0x13e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3304      	adds	r3, #4
 8001406:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d802      	bhi.n	8001414 <HAL_GPIO_Init+0x14c>
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x152>
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	3b08      	subs	r3, #8
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	210f      	movs	r1, #15
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	6a39      	ldr	r1, [r7, #32]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	431a      	orrs	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80b1 	beq.w	80015aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a4c      	ldr	r2, [pc, #304]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001460:	4a48      	ldr	r2, [pc, #288]	; (8001584 <HAL_GPIO_Init+0x2bc>)
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a40      	ldr	r2, [pc, #256]	; (8001588 <HAL_GPIO_Init+0x2c0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d013      	beq.n	80014b4 <HAL_GPIO_Init+0x1ec>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a3f      	ldr	r2, [pc, #252]	; (800158c <HAL_GPIO_Init+0x2c4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d00d      	beq.n	80014b0 <HAL_GPIO_Init+0x1e8>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <HAL_GPIO_Init+0x2c8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d007      	beq.n	80014ac <HAL_GPIO_Init+0x1e4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3d      	ldr	r2, [pc, #244]	; (8001594 <HAL_GPIO_Init+0x2cc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d101      	bne.n	80014a8 <HAL_GPIO_Init+0x1e0>
 80014a4:	2303      	movs	r3, #3
 80014a6:	e006      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e004      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014b4:	2300      	movs	r3, #0
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	f002 0203 	and.w	r2, r2, #3
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	4093      	lsls	r3, r2
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014c6:	492f      	ldr	r1, [pc, #188]	; (8001584 <HAL_GPIO_Init+0x2bc>)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	492c      	ldr	r1, [pc, #176]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4928      	ldr	r1, [pc, #160]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	4922      	ldr	r1, [pc, #136]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	43db      	mvns	r3, r3
 800151e:	491e      	ldr	r1, [pc, #120]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001520:	4013      	ands	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	4918      	ldr	r1, [pc, #96]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4914      	ldr	r1, [pc, #80]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001548:	4013      	ands	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d021      	beq.n	800159c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	490e      	ldr	r1, [pc, #56]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	60cb      	str	r3, [r1, #12]
 8001564:	e021      	b.n	80015aa <HAL_GPIO_Init+0x2e2>
 8001566:	bf00      	nop
 8001568:	10320000 	.word	0x10320000
 800156c:	10310000 	.word	0x10310000
 8001570:	10220000 	.word	0x10220000
 8001574:	10210000 	.word	0x10210000
 8001578:	10120000 	.word	0x10120000
 800157c:	10110000 	.word	0x10110000
 8001580:	40021000 	.word	0x40021000
 8001584:	40010000 	.word	0x40010000
 8001588:	40010800 	.word	0x40010800
 800158c:	40010c00 	.word	0x40010c00
 8001590:	40011000 	.word	0x40011000
 8001594:	40011400 	.word	0x40011400
 8001598:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_GPIO_Init+0x304>)
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	4909      	ldr	r1, [pc, #36]	; (80015cc <HAL_GPIO_Init+0x304>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	3301      	adds	r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f47f ae8e 	bne.w	80012dc <HAL_GPIO_Init+0x14>
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	372c      	adds	r7, #44	; 0x2c
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40010400 	.word	0x40010400

080015d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	e001      	b.n	80015f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	807b      	strh	r3, [r7, #2]
 800160a:	4613      	mov	r3, r2
 800160c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800160e:	787b      	ldrb	r3, [r7, #1]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001614:	887a      	ldrh	r2, [r7, #2]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800161a:	e003      	b.n	8001624 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	041a      	lsls	r2, r3, #16
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	611a      	str	r2, [r3, #16]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
	...

08001630 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d006      	beq.n	8001654 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f806 	bl	8001660 <HAL_GPIO_EXTI_Callback>
  }
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40010400 	.word	0x40010400

08001660 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e26c      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8087 	beq.w	80017a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001694:	4b92      	ldr	r3, [pc, #584]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b04      	cmp	r3, #4
 800169e:	d00c      	beq.n	80016ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016a0:	4b8f      	ldr	r3, [pc, #572]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d112      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
 80016ac:	4b8c      	ldr	r3, [pc, #560]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b8:	d10b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ba:	4b89      	ldr	r3, [pc, #548]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d06c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x12c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d168      	bne.n	80017a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e246      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x76>
 80016dc:	4b80      	ldr	r3, [pc, #512]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a7f      	ldr	r2, [pc, #508]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e02e      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x98>
 80016f2:	4b7b      	ldr	r3, [pc, #492]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7a      	ldr	r2, [pc, #488]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b78      	ldr	r3, [pc, #480]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a77      	ldr	r2, [pc, #476]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0xbc>
 8001716:	4b72      	ldr	r3, [pc, #456]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a71      	ldr	r2, [pc, #452]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6f      	ldr	r3, [pc, #444]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6e      	ldr	r2, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 8001730:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a6a      	ldr	r2, [pc, #424]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a67      	ldr	r2, [pc, #412]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fc74 	bl	800103c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fc70 	bl	800103c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1fa      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b5d      	ldr	r3, [pc, #372]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xe4>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fc60 	bl	800103c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fc5c 	bl	800103c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1e6      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x10c>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ae:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x18c>
 80017c6:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x176>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1ba      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4939      	ldr	r1, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e03a      	b.n	8001876 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff fc15 	bl	800103c <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fc11 	bl	800103c <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e19b      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4927      	ldr	r1, [pc, #156]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fbf4 	bl	800103c <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fbf0 	bl	800103c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e17a      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d03a      	beq.n	80018f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d019      	beq.n	80018be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_RCC_OscConfig+0x274>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001890:	f7ff fbd4 	bl	800103c <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff fbd0 	bl	800103c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e15a      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f000 faa6 	bl	8001e08 <RCC_Delay>
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_RCC_OscConfig+0x274>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fbba 	bl	800103c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ca:	e00f      	b.n	80018ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fbb6 	bl	800103c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d908      	bls.n	80018ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e140      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	42420000 	.word	0x42420000
 80018e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	4b9e      	ldr	r3, [pc, #632]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e9      	bne.n	80018cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80a6 	beq.w	8001a52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4b97      	ldr	r3, [pc, #604]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10d      	bne.n	8001932 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b94      	ldr	r3, [pc, #592]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a93      	ldr	r2, [pc, #588]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b91      	ldr	r3, [pc, #580]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192e:	2301      	movs	r3, #1
 8001930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001932:	4b8e      	ldr	r3, [pc, #568]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193e:	4b8b      	ldr	r3, [pc, #556]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a8a      	ldr	r2, [pc, #552]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194a:	f7ff fb77 	bl	800103c <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001952:	f7ff fb73 	bl	800103c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	; 0x64
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0fd      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	4b81      	ldr	r3, [pc, #516]	; (8001b6c <HAL_RCC_OscConfig+0x4f8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x312>
 8001978:	4b7b      	ldr	r3, [pc, #492]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4a7a      	ldr	r2, [pc, #488]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6213      	str	r3, [r2, #32]
 8001984:	e02d      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x334>
 800198e:	4b76      	ldr	r3, [pc, #472]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a75      	ldr	r2, [pc, #468]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a72      	ldr	r2, [pc, #456]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	e01c      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d10c      	bne.n	80019ca <HAL_RCC_OscConfig+0x356>
 80019b0:	4b6d      	ldr	r3, [pc, #436]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a6c      	ldr	r2, [pc, #432]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6213      	str	r3, [r2, #32]
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a69      	ldr	r2, [pc, #420]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a66      	ldr	r2, [pc, #408]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	4b64      	ldr	r3, [pc, #400]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a63      	ldr	r2, [pc, #396]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d015      	beq.n	8001a16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7ff fb27 	bl	800103c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff fb23 	bl	800103c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0ab      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ee      	beq.n	80019f2 <HAL_RCC_OscConfig+0x37e>
 8001a14:	e014      	b.n	8001a40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fb11 	bl	800103c <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff fb0d 	bl	800103c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e095      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ee      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b48      	ldr	r3, [pc, #288]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a47      	ldr	r2, [pc, #284]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8081 	beq.w	8001b5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d061      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d146      	bne.n	8001afe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_RCC_OscConfig+0x4fc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fae1 	bl	800103c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff fadd 	bl	800103c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e067      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d108      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	492d      	ldr	r1, [pc, #180]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a19      	ldr	r1, [r3, #32]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	4927      	ldr	r1, [pc, #156]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_RCC_OscConfig+0x4fc>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fab1 	bl	800103c <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ade:	f7ff faad 	bl	800103c <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e037      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x46a>
 8001afc:	e02f      	b.n	8001b5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_RCC_OscConfig+0x4fc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fa9a 	bl	800103c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff fa96 	bl	800103c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e020      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x498>
 8001b2a:	e018      	b.n	8001b5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e013      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	42420060 	.word	0x42420060

08001b74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0d0      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d910      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0207 	bic.w	r2, r3, #7
 8001b9e:	4965      	ldr	r1, [pc, #404]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b63      	ldr	r3, [pc, #396]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0b8      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd0:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a58      	ldr	r2, [pc, #352]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a52      	ldr	r2, [pc, #328]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	494d      	ldr	r1, [pc, #308]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d040      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d115      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e07f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e073      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e06b      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4936      	ldr	r1, [pc, #216]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c64:	f7ff f9ea 	bl	800103c <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7ff f9e6 	bl	800103c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e053      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d210      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 0207 	bic.w	r2, r3, #7
 8001caa:	4922      	ldr	r1, [pc, #136]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e032      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4916      	ldr	r1, [pc, #88]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	490e      	ldr	r1, [pc, #56]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d02:	f000 f821 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	490a      	ldr	r1, [pc, #40]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_RCC_ClockConfig+0x1cc>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f948 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08002a60 	.word	0x08002a60
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d48:	b490      	push	{r4, r7}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d50:	1d3c      	adds	r4, r7, #4
 8001d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d58:	f240 2301 	movw	r3, #513	; 0x201
 8001d5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x40>
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x46>
 8001d86:	e02d      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d8a:	623b      	str	r3, [r7, #32]
      break;
 8001d8c:	e02d      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	0c9b      	lsrs	r3, r3, #18
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001da0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	0c5b      	lsrs	r3, r3, #17
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dba:	4413      	add	r3, r2
 8001dbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc6:	fb02 f203 	mul.w	r2, r2, r3
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd2:	e004      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	623b      	str	r3, [r7, #32]
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de6:	623b      	str	r3, [r7, #32]
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	6a3b      	ldr	r3, [r7, #32]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc90      	pop	{r4, r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	08002a50 	.word	0x08002a50
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	007a1200 	.word	0x007a1200
 8001e04:	003d0900 	.word	0x003d0900

08001e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <RCC_Delay+0x34>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <RCC_Delay+0x38>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0a5b      	lsrs	r3, r3, #9
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e24:	bf00      	nop
  }
  while (Delay --);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1e5a      	subs	r2, r3, #1
 8001e2a:	60fa      	str	r2, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f9      	bne.n	8001e24 <RCC_Delay+0x1c>
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	10624dd3 	.word	0x10624dd3

08001e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e041      	b.n	8001eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe ff64 	bl	8000d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f000 faaa 	bl	80023dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e041      	b.n	8001f78 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d106      	bne.n	8001f0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f839 	bl	8001f80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4610      	mov	r0, r2
 8001f22:	f000 fa5b 	bl	80023dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_TIM_PWM_Start+0x24>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	bf14      	ite	ne
 8001fb0:	2301      	movne	r3, #1
 8001fb2:	2300      	moveq	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e022      	b.n	8001ffe <HAL_TIM_PWM_Start+0x6a>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d109      	bne.n	8001fd2 <HAL_TIM_PWM_Start+0x3e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	bf14      	ite	ne
 8001fca:	2301      	movne	r3, #1
 8001fcc:	2300      	moveq	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	e015      	b.n	8001ffe <HAL_TIM_PWM_Start+0x6a>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d109      	bne.n	8001fec <HAL_TIM_PWM_Start+0x58>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	bf14      	ite	ne
 8001fe4:	2301      	movne	r3, #1
 8001fe6:	2300      	moveq	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	e008      	b.n	8001ffe <HAL_TIM_PWM_Start+0x6a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e05e      	b.n	80020c4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d104      	bne.n	8002016 <HAL_TIM_PWM_Start+0x82>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002014:	e013      	b.n	800203e <HAL_TIM_PWM_Start+0xaa>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b04      	cmp	r3, #4
 800201a:	d104      	bne.n	8002026 <HAL_TIM_PWM_Start+0x92>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002024:	e00b      	b.n	800203e <HAL_TIM_PWM_Start+0xaa>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d104      	bne.n	8002036 <HAL_TIM_PWM_Start+0xa2>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002034:	e003      	b.n	800203e <HAL_TIM_PWM_Start+0xaa>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2201      	movs	r2, #1
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fc48 	bl	80028dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <HAL_TIM_PWM_Start+0x138>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d107      	bne.n	8002066 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a18      	ldr	r2, [pc, #96]	; (80020cc <HAL_TIM_PWM_Start+0x138>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00e      	beq.n	800208e <HAL_TIM_PWM_Start+0xfa>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002078:	d009      	beq.n	800208e <HAL_TIM_PWM_Start+0xfa>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <HAL_TIM_PWM_Start+0x13c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d004      	beq.n	800208e <HAL_TIM_PWM_Start+0xfa>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <HAL_TIM_PWM_Start+0x140>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d111      	bne.n	80020b2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b06      	cmp	r3, #6
 800209e:	d010      	beq.n	80020c2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b0:	e007      	b.n	80020c2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800

080020d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e0ac      	b.n	800224c <HAL_TIM_PWM_ConfigChannel+0x174>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	f200 809f 	bhi.w	8002240 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002102:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	0800213d 	.word	0x0800213d
 800210c:	08002241 	.word	0x08002241
 8002110:	08002241 	.word	0x08002241
 8002114:	08002241 	.word	0x08002241
 8002118:	0800217d 	.word	0x0800217d
 800211c:	08002241 	.word	0x08002241
 8002120:	08002241 	.word	0x08002241
 8002124:	08002241 	.word	0x08002241
 8002128:	080021bf 	.word	0x080021bf
 800212c:	08002241 	.word	0x08002241
 8002130:	08002241 	.word	0x08002241
 8002134:	08002241 	.word	0x08002241
 8002138:	080021ff 	.word	0x080021ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f9ac 	bl	80024a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0208 	orr.w	r2, r2, #8
 8002156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0204 	bic.w	r2, r2, #4
 8002166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6999      	ldr	r1, [r3, #24]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	619a      	str	r2, [r3, #24]
      break;
 800217a:	e062      	b.n	8002242 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f9f2 	bl	800256c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6999      	ldr	r1, [r3, #24]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	021a      	lsls	r2, r3, #8
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	619a      	str	r2, [r3, #24]
      break;
 80021bc:	e041      	b.n	8002242 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fa3b 	bl	8002640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0208 	orr.w	r2, r2, #8
 80021d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0204 	bic.w	r2, r2, #4
 80021e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69d9      	ldr	r1, [r3, #28]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	61da      	str	r2, [r3, #28]
      break;
 80021fc:	e021      	b.n	8002242 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fa85 	bl	8002714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69d9      	ldr	r1, [r3, #28]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	021a      	lsls	r2, r3, #8
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	61da      	str	r2, [r3, #28]
      break;
 800223e:	e000      	b.n	8002242 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002240:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_TIM_ConfigClockSource+0x18>
 8002268:	2302      	movs	r3, #2
 800226a:	e0b3      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x180>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800228a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002292:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a4:	d03e      	beq.n	8002324 <HAL_TIM_ConfigClockSource+0xd0>
 80022a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022aa:	f200 8087 	bhi.w	80023bc <HAL_TIM_ConfigClockSource+0x168>
 80022ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b2:	f000 8085 	beq.w	80023c0 <HAL_TIM_ConfigClockSource+0x16c>
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ba:	d87f      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
 80022bc:	2b70      	cmp	r3, #112	; 0x70
 80022be:	d01a      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0xa2>
 80022c0:	2b70      	cmp	r3, #112	; 0x70
 80022c2:	d87b      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
 80022c4:	2b60      	cmp	r3, #96	; 0x60
 80022c6:	d050      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x116>
 80022c8:	2b60      	cmp	r3, #96	; 0x60
 80022ca:	d877      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
 80022cc:	2b50      	cmp	r3, #80	; 0x50
 80022ce:	d03c      	beq.n	800234a <HAL_TIM_ConfigClockSource+0xf6>
 80022d0:	2b50      	cmp	r3, #80	; 0x50
 80022d2:	d873      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d058      	beq.n	800238a <HAL_TIM_ConfigClockSource+0x136>
 80022d8:	2b40      	cmp	r3, #64	; 0x40
 80022da:	d86f      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
 80022dc:	2b30      	cmp	r3, #48	; 0x30
 80022de:	d064      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x156>
 80022e0:	2b30      	cmp	r3, #48	; 0x30
 80022e2:	d86b      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d060      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x156>
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d867      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d05c      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x156>
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d05a      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80022f4:	e062      	b.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6899      	ldr	r1, [r3, #8]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f000 faca 	bl	800289e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002318:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	609a      	str	r2, [r3, #8]
      break;
 8002322:	e04e      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6899      	ldr	r1, [r3, #8]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f000 fab3 	bl	800289e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002346:	609a      	str	r2, [r3, #8]
      break;
 8002348:	e03b      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6859      	ldr	r1, [r3, #4]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	461a      	mov	r2, r3
 8002358:	f000 fa2a 	bl	80027b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2150      	movs	r1, #80	; 0x50
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fa81 	bl	800286a <TIM_ITRx_SetConfig>
      break;
 8002368:	e02b      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6859      	ldr	r1, [r3, #4]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	461a      	mov	r2, r3
 8002378:	f000 fa48 	bl	800280c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2160      	movs	r1, #96	; 0x60
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fa71 	bl	800286a <TIM_ITRx_SetConfig>
      break;
 8002388:	e01b      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6859      	ldr	r1, [r3, #4]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	461a      	mov	r2, r3
 8002398:	f000 fa0a 	bl	80027b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2140      	movs	r1, #64	; 0x40
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fa61 	bl	800286a <TIM_ITRx_SetConfig>
      break;
 80023a8:	e00b      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4610      	mov	r0, r2
 80023b6:	f000 fa58 	bl	800286a <TIM_ITRx_SetConfig>
        break;
 80023ba:	e002      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023bc:	bf00      	nop
 80023be:	e000      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a29      	ldr	r2, [pc, #164]	; (8002494 <TIM_Base_SetConfig+0xb8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00b      	beq.n	800240c <TIM_Base_SetConfig+0x30>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fa:	d007      	beq.n	800240c <TIM_Base_SetConfig+0x30>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a26      	ldr	r2, [pc, #152]	; (8002498 <TIM_Base_SetConfig+0xbc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <TIM_Base_SetConfig+0x30>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a25      	ldr	r2, [pc, #148]	; (800249c <TIM_Base_SetConfig+0xc0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d108      	bne.n	800241e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <TIM_Base_SetConfig+0xb8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00b      	beq.n	800243e <TIM_Base_SetConfig+0x62>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242c:	d007      	beq.n	800243e <TIM_Base_SetConfig+0x62>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a19      	ldr	r2, [pc, #100]	; (8002498 <TIM_Base_SetConfig+0xbc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d003      	beq.n	800243e <TIM_Base_SetConfig+0x62>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a18      	ldr	r2, [pc, #96]	; (800249c <TIM_Base_SetConfig+0xc0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d108      	bne.n	8002450 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <TIM_Base_SetConfig+0xb8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d103      	bne.n	8002484 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	615a      	str	r2, [r3, #20]
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40000400 	.word	0x40000400
 800249c:	40000800 	.word	0x40000800

080024a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f023 0201 	bic.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f023 0302 	bic.w	r3, r3, #2
 80024e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <TIM_OC1_SetConfig+0xc8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d10c      	bne.n	8002516 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0308 	bic.w	r3, r3, #8
 8002502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a13      	ldr	r2, [pc, #76]	; (8002568 <TIM_OC1_SetConfig+0xc8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d111      	bne.n	8002542 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800252c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	621a      	str	r2, [r3, #32]
}
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40012c00 	.word	0x40012c00

0800256c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f023 0210 	bic.w	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800259a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0320 	bic.w	r3, r3, #32
 80025b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a1d      	ldr	r2, [pc, #116]	; (800263c <TIM_OC2_SetConfig+0xd0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d10d      	bne.n	80025e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a14      	ldr	r2, [pc, #80]	; (800263c <TIM_OC2_SetConfig+0xd0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d113      	bne.n	8002618 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	621a      	str	r2, [r3, #32]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40012c00 	.word	0x40012c00

08002640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <TIM_OC3_SetConfig+0xd0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10d      	bne.n	80026ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <TIM_OC3_SetConfig+0xd0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d113      	bne.n	80026ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	621a      	str	r2, [r3, #32]
}
 8002704:	bf00      	nop
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00

08002714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800275e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	031b      	lsls	r3, r3, #12
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <TIM_OC4_SetConfig+0x98>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d109      	bne.n	8002788 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800277a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	019b      	lsls	r3, r3, #6
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	621a      	str	r2, [r3, #32]
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	40012c00 	.word	0x40012c00

080027b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f023 0201 	bic.w	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f023 030a 	bic.w	r3, r3, #10
 80027ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	621a      	str	r2, [r3, #32]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f023 0210 	bic.w	r2, r3, #16
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002836:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	031b      	lsls	r3, r3, #12
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002848:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	621a      	str	r2, [r3, #32]
}
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	f043 0307 	orr.w	r3, r3, #7
 800288c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	609a      	str	r2, [r3, #8]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800289e:	b480      	push	{r7}
 80028a0:	b087      	sub	sp, #28
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	021a      	lsls	r2, r3, #8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	609a      	str	r2, [r3, #8]
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2201      	movs	r2, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	401a      	ands	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a1a      	ldr	r2, [r3, #32]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	431a      	orrs	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	621a      	str	r2, [r3, #32]
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002938:	2302      	movs	r3, #2
 800293a:	e046      	b.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d009      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10c      	bne.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800

080029e0 <__libc_init_array>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	2600      	movs	r6, #0
 80029e4:	4d0c      	ldr	r5, [pc, #48]	; (8002a18 <__libc_init_array+0x38>)
 80029e6:	4c0d      	ldr	r4, [pc, #52]	; (8002a1c <__libc_init_array+0x3c>)
 80029e8:	1b64      	subs	r4, r4, r5
 80029ea:	10a4      	asrs	r4, r4, #2
 80029ec:	42a6      	cmp	r6, r4
 80029ee:	d109      	bne.n	8002a04 <__libc_init_array+0x24>
 80029f0:	f000 f822 	bl	8002a38 <_init>
 80029f4:	2600      	movs	r6, #0
 80029f6:	4d0a      	ldr	r5, [pc, #40]	; (8002a20 <__libc_init_array+0x40>)
 80029f8:	4c0a      	ldr	r4, [pc, #40]	; (8002a24 <__libc_init_array+0x44>)
 80029fa:	1b64      	subs	r4, r4, r5
 80029fc:	10a4      	asrs	r4, r4, #2
 80029fe:	42a6      	cmp	r6, r4
 8002a00:	d105      	bne.n	8002a0e <__libc_init_array+0x2e>
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
 8002a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a08:	4798      	blx	r3
 8002a0a:	3601      	adds	r6, #1
 8002a0c:	e7ee      	b.n	80029ec <__libc_init_array+0xc>
 8002a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a12:	4798      	blx	r3
 8002a14:	3601      	adds	r6, #1
 8002a16:	e7f2      	b.n	80029fe <__libc_init_array+0x1e>
 8002a18:	08002a70 	.word	0x08002a70
 8002a1c:	08002a70 	.word	0x08002a70
 8002a20:	08002a70 	.word	0x08002a70
 8002a24:	08002a74 	.word	0x08002a74

08002a28 <memset>:
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4402      	add	r2, r0
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d100      	bne.n	8002a32 <memset+0xa>
 8002a30:	4770      	bx	lr
 8002a32:	f803 1b01 	strb.w	r1, [r3], #1
 8002a36:	e7f9      	b.n	8002a2c <memset+0x4>

08002a38 <_init>:
 8002a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3a:	bf00      	nop
 8002a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a3e:	bc08      	pop	{r3}
 8002a40:	469e      	mov	lr, r3
 8002a42:	4770      	bx	lr

08002a44 <_fini>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	bf00      	nop
 8002a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4a:	bc08      	pop	{r3}
 8002a4c:	469e      	mov	lr, r3
 8002a4e:	4770      	bx	lr
